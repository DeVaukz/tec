// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tec {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GameStateUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStateUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fstate_2eproto() {
  protobuf_AddDesc_game_5fstate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_state.proto");
  GOOGLE_CHECK(file != NULL);
  GameStateUpdate_descriptor_ = file->message_type(0);
  static const int GameStateUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateUpdate, state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateUpdate, entity_),
  };
  GameStateUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameStateUpdate_descriptor_,
      GameStateUpdate::default_instance_,
      GameStateUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameStateUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateUpdate, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fstate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameStateUpdate_descriptor_, &GameStateUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fstate_2eproto() {
  delete GameStateUpdate::default_instance_;
  delete GameStateUpdate_reflection_;
}

void protobuf_AddDesc_game_5fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tec::proto::protobuf_AddDesc_components_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020game_state.proto\022\ttec.proto\032\020component"
    "s.proto\"F\n\017GameStateUpdate\022\020\n\010state_id\030\001"
    " \002(\004\022!\n\006entity\030\002 \003(\0132\021.tec.proto.Entity", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_state.proto", &protobuf_RegisterTypes);
  GameStateUpdate::default_instance_ = new GameStateUpdate();
  GameStateUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fstate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fstate_2eproto {
  StaticDescriptorInitializer_game_5fstate_2eproto() {
    protobuf_AddDesc_game_5fstate_2eproto();
  }
} static_descriptor_initializer_game_5fstate_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GameStateUpdate::kStateIdFieldNumber;
const int GameStateUpdate::kEntityFieldNumber;
#endif  // !_MSC_VER

GameStateUpdate::GameStateUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.GameStateUpdate)
}

void GameStateUpdate::InitAsDefaultInstance() {
}

GameStateUpdate::GameStateUpdate(const GameStateUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.GameStateUpdate)
}

void GameStateUpdate::SharedCtor() {
  _cached_size_ = 0;
  state_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStateUpdate::~GameStateUpdate() {
  // @@protoc_insertion_point(destructor:tec.proto.GameStateUpdate)
  SharedDtor();
}

void GameStateUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStateUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStateUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStateUpdate_descriptor_;
}

const GameStateUpdate& GameStateUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fstate_2eproto();
  return *default_instance_;
}

GameStateUpdate* GameStateUpdate::default_instance_ = NULL;

GameStateUpdate* GameStateUpdate::New(::google::protobuf::Arena* arena) const {
  GameStateUpdate* n = new GameStateUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStateUpdate::Clear() {
  state_id_ = GOOGLE_ULONGLONG(0);
  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameStateUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.GameStateUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 state_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_id_)));
          set_has_state_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }

      // repeated .tec.proto.Entity entity = 2;
      case 2: {
        if (tag == 18) {
         parse_entity:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_entity;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.GameStateUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.GameStateUpdate)
  return false;
#undef DO_
}

void GameStateUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.GameStateUpdate)
  // required uint64 state_id = 1;
  if (has_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->state_id(), output);
  }

  // repeated .tec.proto.Entity entity = 2;
  for (unsigned int i = 0, n = this->entity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.GameStateUpdate)
}

::google::protobuf::uint8* GameStateUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.GameStateUpdate)
  // required uint64 state_id = 1;
  if (has_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->state_id(), target);
  }

  // repeated .tec.proto.Entity entity = 2;
  for (unsigned int i = 0, n = this->entity_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.GameStateUpdate)
  return target;
}

int GameStateUpdate::ByteSize() const {
  int total_size = 0;

  // required uint64 state_id = 1;
  if (has_state_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->state_id());
  }
  // repeated .tec.proto.Entity entity = 2;
  total_size += 1 * this->entity_size();
  for (int i = 0; i < this->entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStateUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameStateUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStateUpdate>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStateUpdate::MergeFrom(const GameStateUpdate& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entity_.MergeFrom(from.entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state_id()) {
      set_state_id(from.state_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameStateUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateUpdate::CopyFrom(const GameStateUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entity())) return false;
  return true;
}

void GameStateUpdate::Swap(GameStateUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStateUpdate::InternalSwap(GameStateUpdate* other) {
  std::swap(state_id_, other->state_id_);
  entity_.UnsafeArenaSwap(&other->entity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStateUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStateUpdate_descriptor_;
  metadata.reflection = GameStateUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStateUpdate

// required uint64 state_id = 1;
bool GameStateUpdate::has_state_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStateUpdate::set_has_state_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStateUpdate::clear_has_state_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStateUpdate::clear_state_id() {
  state_id_ = GOOGLE_ULONGLONG(0);
  clear_has_state_id();
}
 ::google::protobuf::uint64 GameStateUpdate::state_id() const {
  // @@protoc_insertion_point(field_get:tec.proto.GameStateUpdate.state_id)
  return state_id_;
}
 void GameStateUpdate::set_state_id(::google::protobuf::uint64 value) {
  set_has_state_id();
  state_id_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.GameStateUpdate.state_id)
}

// repeated .tec.proto.Entity entity = 2;
int GameStateUpdate::entity_size() const {
  return entity_.size();
}
void GameStateUpdate::clear_entity() {
  entity_.Clear();
}
 const ::tec::proto::Entity& GameStateUpdate::entity(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.GameStateUpdate.entity)
  return entity_.Get(index);
}
 ::tec::proto::Entity* GameStateUpdate::mutable_entity(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.GameStateUpdate.entity)
  return entity_.Mutable(index);
}
 ::tec::proto::Entity* GameStateUpdate::add_entity() {
  // @@protoc_insertion_point(field_add:tec.proto.GameStateUpdate.entity)
  return entity_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::tec::proto::Entity >&
GameStateUpdate::entity() const {
  // @@protoc_insertion_point(field_list:tec.proto.GameStateUpdate.entity)
  return entity_;
}
 ::google::protobuf::RepeatedPtrField< ::tec::proto::Entity >*
GameStateUpdate::mutable_entity() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.GameStateUpdate.entity)
  return &entity_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tec

// @@protoc_insertion_point(global_scope)
