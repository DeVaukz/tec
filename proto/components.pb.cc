// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "components.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tec {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Renderable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Renderable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_CenterOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_CenterOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Orientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Orientation_RotationOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Orientation_RotationOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* View_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  View_reflection_ = NULL;
const ::google::protobuf::Descriptor* Animation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Animation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollisionBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionBody_reflection_ = NULL;
struct CollisionBodyOneofInstance {
  const ::tec::proto::CollisionBody_Box* box_;
  const ::tec::proto::CollisionBody_Sphere* sphere_;
  const ::tec::proto::CollisionBody_Capsule* capsule_;
}* CollisionBody_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CollisionBody_Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionBody_Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollisionBody_Sphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionBody_Sphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollisionBody_Capsule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionBody_Capsule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Velocity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocity_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_reflection_ = NULL;
const ::google::protobuf::Descriptor* Light_Attenuation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_Attenuation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Light_Direction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Light_Direction_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuaScript_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuaScript_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoxelVolumen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoxelVolumen_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComputerScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputerScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Computer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Computer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Computer_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Computer_Device_reflection_ = NULL;
struct Computer_DeviceOneofInstance {
  const ::tec::proto::ComputerScreen* computerscreen_;
}* Computer_Device_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Computer_CPU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Computer_CPU_reflection_ = NULL;
struct Computer_CPUOneofInstance {
  const ::tec::proto::Computer_CPU_TR3200* tr3200_;
}* Computer_CPU_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Computer_CPU_TR3200_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Computer_CPU_TR3200_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
struct ComponentOneofInstance {
  const ::tec::proto::Renderable* renderable_;
  const ::tec::proto::Position* position_;
  const ::tec::proto::Orientation* orientation_;
  const ::tec::proto::View* view_;
  const ::tec::proto::Animation* animation_;
  const ::tec::proto::Scale* scale_;
  const ::tec::proto::CollisionBody* collision_body_;
  const ::tec::proto::Velocity* velocity_;
  const ::tec::proto::AudioSource* audio_source_;
  const ::tec::proto::Light* pointlight_;
  const ::tec::proto::Light* directionallight_;
  const ::tec::proto::Light* spotlight_;
  const ::tec::proto::VoxelVolumen* voxelvolume_;
  const ::tec::proto::Computer* computer_;
  const ::tec::proto::LuaScript* luascript_;
}* Component_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityFileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityFileList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_components_2eproto() {
  protobuf_AddDesc_components_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "components.proto");
  GOOGLE_CHECK(file != NULL);
  Renderable_descriptor_ = file->message_type(0);
  static const int Renderable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, shader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, mesh_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, hidden_),
  };
  Renderable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Renderable_descriptor_,
      Renderable::default_instance_,
      Renderable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, _has_bits_[0]),
      -1,
      -1,
      sizeof(Renderable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, _internal_metadata_),
      -1);
  Position_descriptor_ = file->message_type(1);
  static const int Position_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, offset_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      -1);
  Position_CenterOffset_descriptor_ = Position_descriptor_->nested_type(0);
  static const int Position_CenterOffset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position_CenterOffset, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position_CenterOffset, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position_CenterOffset, z_),
  };
  Position_CenterOffset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_CenterOffset_descriptor_,
      Position_CenterOffset::default_instance_,
      Position_CenterOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position_CenterOffset, _has_bits_[0]),
      -1,
      -1,
      sizeof(Position_CenterOffset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position_CenterOffset, _internal_metadata_),
      -1);
  Orientation_descriptor_ = file->message_type(2);
  static const int Orientation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, offset_),
  };
  Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Orientation_descriptor_,
      Orientation::default_instance_,
      Orientation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _internal_metadata_),
      -1);
  Orientation_RotationOffset_descriptor_ = Orientation_descriptor_->nested_type(0);
  static const int Orientation_RotationOffset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation_RotationOffset, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation_RotationOffset, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation_RotationOffset, z_),
  };
  Orientation_RotationOffset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Orientation_RotationOffset_descriptor_,
      Orientation_RotationOffset::default_instance_,
      Orientation_RotationOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation_RotationOffset, _has_bits_[0]),
      -1,
      -1,
      sizeof(Orientation_RotationOffset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation_RotationOffset, _internal_metadata_),
      -1);
  View_descriptor_ = file->message_type(3);
  static const int View_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, active_),
  };
  View_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      View_descriptor_,
      View::default_instance_,
      View_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _has_bits_[0]),
      -1,
      -1,
      sizeof(View),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _internal_metadata_),
      -1);
  Animation_descriptor_ = file->message_type(4);
  static const int Animation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, animation_name_),
  };
  Animation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Animation_descriptor_,
      Animation::default_instance_,
      Animation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Animation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _internal_metadata_),
      -1);
  Scale_descriptor_ = file->message_type(5);
  static const int Scale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, z_),
  };
  Scale_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scale_descriptor_,
      Scale::default_instance_,
      Scale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scale),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, _internal_metadata_),
      -1);
  CollisionBody_descriptor_ = file->message_type(6);
  static const int CollisionBody_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, disable_deactivation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, disable_rotation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CollisionBody_default_oneof_instance_, box_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CollisionBody_default_oneof_instance_, sphere_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CollisionBody_default_oneof_instance_, capsule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, shape_),
  };
  CollisionBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionBody_descriptor_,
      CollisionBody::default_instance_,
      CollisionBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, _has_bits_[0]),
      -1,
      -1,
      CollisionBody_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, _oneof_case_[0]),
      sizeof(CollisionBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody, _internal_metadata_),
      -1);
  CollisionBody_Box_descriptor_ = CollisionBody_descriptor_->nested_type(0);
  static const int CollisionBody_Box_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Box, x_extent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Box, y_extent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Box, z_extent_),
  };
  CollisionBody_Box_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionBody_Box_descriptor_,
      CollisionBody_Box::default_instance_,
      CollisionBody_Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Box, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollisionBody_Box),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Box, _internal_metadata_),
      -1);
  CollisionBody_Sphere_descriptor_ = CollisionBody_descriptor_->nested_type(1);
  static const int CollisionBody_Sphere_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Sphere, radius_),
  };
  CollisionBody_Sphere_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionBody_Sphere_descriptor_,
      CollisionBody_Sphere::default_instance_,
      CollisionBody_Sphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Sphere, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollisionBody_Sphere),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Sphere, _internal_metadata_),
      -1);
  CollisionBody_Capsule_descriptor_ = CollisionBody_descriptor_->nested_type(2);
  static const int CollisionBody_Capsule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Capsule, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Capsule, height_),
  };
  CollisionBody_Capsule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CollisionBody_Capsule_descriptor_,
      CollisionBody_Capsule::default_instance_,
      CollisionBody_Capsule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Capsule, _has_bits_[0]),
      -1,
      -1,
      sizeof(CollisionBody_Capsule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionBody_Capsule, _internal_metadata_),
      -1);
  Velocity_descriptor_ = file->message_type(7);
  static const int Velocity_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, linear_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, linear_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, linear_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, angular_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, angular_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, angular_z_),
  };
  Velocity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Velocity_descriptor_,
      Velocity::default_instance_,
      Velocity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, _has_bits_[0]),
      -1,
      -1,
      sizeof(Velocity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocity, _internal_metadata_),
      -1);
  AudioSource_descriptor_ = file->message_type(8);
  static const int AudioSource_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, looping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, audio_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, playing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, volume_),
  };
  AudioSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AudioSource_descriptor_,
      AudioSource::default_instance_,
      AudioSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(AudioSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSource, _internal_metadata_),
      -1);
  Light_descriptor_ = file->message_type(9);
  static const int Light_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, color_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, color_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, color_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, ambient_intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, diffuse_intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, attenuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, cutoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, direction_),
  };
  Light_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_descriptor_,
      Light::default_instance_,
      Light_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _has_bits_[0]),
      -1,
      -1,
      sizeof(Light),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light, _internal_metadata_),
      -1);
  Light_Attenuation_descriptor_ = Light_descriptor_->nested_type(0);
  static const int Light_Attenuation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Attenuation, constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Attenuation, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Attenuation, exponential_),
  };
  Light_Attenuation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_Attenuation_descriptor_,
      Light_Attenuation::default_instance_,
      Light_Attenuation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Attenuation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Light_Attenuation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Attenuation, _internal_metadata_),
      -1);
  Light_Direction_descriptor_ = Light_descriptor_->nested_type(1);
  static const int Light_Direction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Direction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Direction, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Direction, z_),
  };
  Light_Direction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Light_Direction_descriptor_,
      Light_Direction::default_instance_,
      Light_Direction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Direction, _has_bits_[0]),
      -1,
      -1,
      sizeof(Light_Direction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Light_Direction, _internal_metadata_),
      -1);
  LuaScript_descriptor_ = file->message_type(10);
  static const int LuaScript_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaScript, script_name_),
  };
  LuaScript_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LuaScript_descriptor_,
      LuaScript::default_instance_,
      LuaScript_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaScript, _has_bits_[0]),
      -1,
      -1,
      sizeof(LuaScript),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaScript, _internal_metadata_),
      -1);
  VoxelVolumen_descriptor_ = file->message_type(11);
  static const int VoxelVolumen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelVolumen, dummy_),
  };
  VoxelVolumen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoxelVolumen_descriptor_,
      VoxelVolumen::default_instance_,
      VoxelVolumen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelVolumen, _has_bits_[0]),
      -1,
      -1,
      sizeof(VoxelVolumen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoxelVolumen, _internal_metadata_),
      -1);
  ComputerScreen_descriptor_ = file->message_type(12);
  static const int ComputerScreen_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, text_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, font_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, buffer_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, font_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, vsync_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, e_),
  };
  ComputerScreen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputerScreen_descriptor_,
      ComputerScreen::default_instance_,
      ComputerScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, _has_bits_[0]),
      -1,
      -1,
      sizeof(ComputerScreen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerScreen, _internal_metadata_),
      -1);
  Computer_descriptor_ = file->message_type(13);
  static const int Computer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, rom_file_),
  };
  Computer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Computer_descriptor_,
      Computer::default_instance_,
      Computer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, _has_bits_[0]),
      -1,
      -1,
      sizeof(Computer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer, _internal_metadata_),
      -1);
  Computer_Device_descriptor_ = Computer_descriptor_->nested_type(0);
  static const int Computer_Device_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_Device, slot_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Computer_Device_default_oneof_instance_, computerscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_Device, device_),
  };
  Computer_Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Computer_Device_descriptor_,
      Computer_Device::default_instance_,
      Computer_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_Device, _has_bits_[0]),
      -1,
      -1,
      Computer_Device_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_Device, _oneof_case_[0]),
      sizeof(Computer_Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_Device, _internal_metadata_),
      -1);
  Computer_CPU_descriptor_ = Computer_descriptor_->nested_type(1);
  static const int Computer_CPU_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Computer_CPU_default_oneof_instance_, tr3200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU, cpu_),
  };
  Computer_CPU_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Computer_CPU_descriptor_,
      Computer_CPU::default_instance_,
      Computer_CPU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU, _has_bits_[0]),
      -1,
      -1,
      Computer_CPU_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU, _oneof_case_[0]),
      sizeof(Computer_CPU),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU, _internal_metadata_),
      -1);
  Computer_CPU_TR3200_descriptor_ = Computer_CPU_descriptor_->nested_type(0);
  static const int Computer_CPU_TR3200_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, registers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, wait_cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, int_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, interrupt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, step_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, skiping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, sleeping_),
  };
  Computer_CPU_TR3200_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Computer_CPU_TR3200_descriptor_,
      Computer_CPU_TR3200::default_instance_,
      Computer_CPU_TR3200_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, _has_bits_[0]),
      -1,
      -1,
      sizeof(Computer_CPU_TR3200),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Computer_CPU_TR3200, _internal_metadata_),
      -1);
  Component_descriptor_ = file->message_type(14);
  static const int Component_offsets_[16] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, renderable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, position_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, orientation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, view_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, animation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, scale_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, collision_body_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, velocity_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, audio_source_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, pointlight_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, directionallight_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, spotlight_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, voxelvolume_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, computer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, luascript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, component_),
  };
  Component_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      -1,
      -1,
      Component_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _oneof_case_[0]),
      sizeof(Component),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _internal_metadata_),
      -1);
  Entity_descriptor_ = file->message_type(15);
  static const int Entity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, components_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      -1,
      -1,
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
      -1);
  EntityFileList_descriptor_ = file->message_type(16);
  static const int EntityFileList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFileList, entity_file_list_),
  };
  EntityFileList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityFileList_descriptor_,
      EntityFileList::default_instance_,
      EntityFileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFileList, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityFileList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFileList, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_components_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Renderable_descriptor_, &Renderable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_CenterOffset_descriptor_, &Position_CenterOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Orientation_descriptor_, &Orientation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Orientation_RotationOffset_descriptor_, &Orientation_RotationOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      View_descriptor_, &View::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Animation_descriptor_, &Animation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scale_descriptor_, &Scale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionBody_descriptor_, &CollisionBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionBody_Box_descriptor_, &CollisionBody_Box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionBody_Sphere_descriptor_, &CollisionBody_Sphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CollisionBody_Capsule_descriptor_, &CollisionBody_Capsule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Velocity_descriptor_, &Velocity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AudioSource_descriptor_, &AudioSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_descriptor_, &Light::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_Attenuation_descriptor_, &Light_Attenuation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Light_Direction_descriptor_, &Light_Direction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LuaScript_descriptor_, &LuaScript::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoxelVolumen_descriptor_, &VoxelVolumen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputerScreen_descriptor_, &ComputerScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Computer_descriptor_, &Computer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Computer_Device_descriptor_, &Computer_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Computer_CPU_descriptor_, &Computer_CPU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Computer_CPU_TR3200_descriptor_, &Computer_CPU_TR3200::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityFileList_descriptor_, &EntityFileList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_components_2eproto() {
  delete Renderable::default_instance_;
  delete Renderable_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Position_CenterOffset::default_instance_;
  delete Position_CenterOffset_reflection_;
  delete Orientation::default_instance_;
  delete Orientation_reflection_;
  delete Orientation_RotationOffset::default_instance_;
  delete Orientation_RotationOffset_reflection_;
  delete View::default_instance_;
  delete View_reflection_;
  delete Animation::default_instance_;
  delete Animation_reflection_;
  delete Scale::default_instance_;
  delete Scale_reflection_;
  delete CollisionBody::default_instance_;
  delete CollisionBody_default_oneof_instance_;
  delete CollisionBody_reflection_;
  delete CollisionBody_Box::default_instance_;
  delete CollisionBody_Box_reflection_;
  delete CollisionBody_Sphere::default_instance_;
  delete CollisionBody_Sphere_reflection_;
  delete CollisionBody_Capsule::default_instance_;
  delete CollisionBody_Capsule_reflection_;
  delete Velocity::default_instance_;
  delete Velocity_reflection_;
  delete AudioSource::default_instance_;
  delete AudioSource_reflection_;
  delete Light::default_instance_;
  delete Light_reflection_;
  delete Light_Attenuation::default_instance_;
  delete Light_Attenuation_reflection_;
  delete Light_Direction::default_instance_;
  delete Light_Direction_reflection_;
  delete LuaScript::default_instance_;
  delete LuaScript_reflection_;
  delete VoxelVolumen::default_instance_;
  delete VoxelVolumen_reflection_;
  delete ComputerScreen::default_instance_;
  delete ComputerScreen_reflection_;
  delete Computer::default_instance_;
  delete Computer_reflection_;
  delete Computer_Device::default_instance_;
  delete Computer_Device_default_oneof_instance_;
  delete Computer_Device_reflection_;
  delete Computer_CPU::default_instance_;
  delete Computer_CPU_default_oneof_instance_;
  delete Computer_CPU_reflection_;
  delete Computer_CPU_TR3200::default_instance_;
  delete Computer_CPU_TR3200_reflection_;
  delete Component::default_instance_;
  delete Component_default_oneof_instance_;
  delete Component_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete EntityFileList::default_instance_;
  delete EntityFileList_reflection_;
}

void protobuf_AddDesc_components_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020components.proto\022\ttec.proto\"D\n\nRendera"
    "ble\022\023\n\013shader_name\030\001 \001(\t\022\021\n\tmesh_name\030\002 "
    "\001(\t\022\016\n\006hidden\030\003 \001(\010\"\216\001\n\010Position\022\t\n\001x\030\001 "
    "\001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\0220\n\006offset\030\004 \001("
    "\0132 .tec.proto.Position.CenterOffset\032/\n\014C"
    "enterOffset\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
    " \001(\002\"\243\001\n\013Orientation\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002"
    "(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002(\002\0225\n\006offset\030\005 \001(\013"
    "2%.tec.proto.Orientation.RotationOffset\032"
    "1\n\016RotationOffset\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022"
    "\t\n\001z\030\003 \002(\002\"\026\n\004View\022\016\n\006active\030\001 \001(\010\"#\n\tAn"
    "imation\022\026\n\016animation_name\030\001 \001(\t\"(\n\005Scale"
    "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\365\002\n\rCo"
    "llisionBody\022\034\n\024disable_deactivation\030\001 \001("
    "\010\022\030\n\020disable_rotation\030\002 \001(\010\022+\n\003box\030\003 \001(\013"
    "2\034.tec.proto.CollisionBody.BoxH\000\0221\n\006sphe"
    "re\030\004 \001(\0132\037.tec.proto.CollisionBody.Spher"
    "eH\000\0223\n\007capsule\030\005 \001(\0132 .tec.proto.Collisi"
    "onBody.CapsuleH\000\022\014\n\004mass\030\006 \001(\002\032;\n\003Box\022\020\n"
    "\010x_extent\030\001 \002(\002\022\020\n\010y_extent\030\002 \002(\002\022\020\n\010z_e"
    "xtent\030\003 \002(\002\032\030\n\006Sphere\022\016\n\006radius\030\001 \002(\002\032)\n"
    "\007Capsule\022\016\n\006radius\030\001 \002(\002\022\016\n\006height\030\002 \002(\002"
    "B\007\n\005shape\"y\n\010Velocity\022\020\n\010linear_x\030\001 \001(\002\022"
    "\020\n\010linear_y\030\002 \001(\002\022\020\n\010linear_z\030\003 \001(\002\022\021\n\ta"
    "ngular_x\030\004 \001(\002\022\021\n\tangular_y\030\005 \001(\002\022\021\n\tang"
    "ular_z\030\006 \001(\002\"S\n\013AudioSource\022\017\n\007looping\030\001"
    " \001(\010\022\022\n\naudio_name\030\002 \001(\t\022\017\n\007playing\030\003 \001("
    "\010\022\016\n\006volume\030\004 \001(\r\"\326\002\n\005Light\022\017\n\007color_x\030\001"
    " \001(\002\022\017\n\007color_y\030\002 \001(\002\022\017\n\007color_z\030\003 \001(\002\022\031"
    "\n\021ambient_intensity\030\004 \001(\002\022\031\n\021diffuse_int"
    "ensity\030\005 \001(\002\0221\n\013attenuation\030\006 \001(\0132\034.tec."
    "proto.Light.Attenuation\022\016\n\006cutoff\030\007 \001(\002\022"
    "-\n\tdirection\030\010 \001(\0132\032.tec.proto.Light.Dir"
    "ection\032D\n\013Attenuation\022\020\n\010constant\030\001 \001(\002\022"
    "\016\n\006linear\030\002 \001(\002\022\023\n\013exponential\030\003 \001(\002\032,\n\t"
    "Direction\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001"
    "(\002\" \n\tLuaScript\022\023\n\013script_name\030\001 \001(\t\"\035\n\014"
    "VoxelVolumen\022\r\n\005dummy\030\001 \001(\002\"\237\001\n\016Computer"
    "Screen\022\023\n\013text_buffer\030\001 \002(\014\022\023\n\013font_buff"
    "er\030\002 \002(\014\022\022\n\nbuffer_ptr\030\003 \002(\r\022\020\n\010font_ptr"
    "\030\004 \002(\r\022\021\n\tvsync_msg\030\005 \002(\r\022\t\n\001a\030\006 \002(\r\022\t\n\001"
    "b\030\007 \002(\r\022\t\n\001d\030\010 \002(\r\022\t\n\001e\030\t \002(\r\"\255\003\n\010Comput"
    "er\022+\n\007devices\030\001 \003(\0132\032.tec.proto.Computer"
    ".Device\022\013\n\003ram\030\002 \002(\014\022$\n\003cpu\030\003 \002(\0132\027.tec."
    "proto.Computer.CPU\022\020\n\010rom_file\030\004 \001(\t\032U\n\006"
    "Device\022\014\n\004slot\030\001 \002(\r\0223\n\016computerScreen\030\002"
    " \001(\0132\031.tec.proto.ComputerScreenH\000B\010\n\006dev"
    "ice\032\327\001\n\003CPU\0220\n\006tr3200\030\001 \001(\0132\036.tec.proto."
    "Computer.CPU.TR3200H\000\032\226\001\n\006TR3200\022\021\n\tregi"
    "sters\030\001 \003(\r\022\n\n\002pc\030\002 \002(\r\022\023\n\013wait_cycles\030\003"
    " \002(\r\022\017\n\007int_msg\030\004 \002(\r\022\021\n\tinterrupt\030\005 \002(\010"
    "\022\021\n\tstep_mode\030\006 \002(\010\022\017\n\007skiping\030\007 \002(\010\022\020\n\010"
    "sleeping\030\010 \002(\010B\005\n\003cpu\"\232\005\n\tComponent\022+\n\nr"
    "enderable\030\001 \001(\0132\025.tec.proto.RenderableH\000"
    "\022\'\n\010position\030\002 \001(\0132\023.tec.proto.PositionH"
    "\000\022-\n\013orientation\030\003 \001(\0132\026.tec.proto.Orien"
    "tationH\000\022\037\n\004view\030\004 \001(\0132\017.tec.proto.ViewH"
    "\000\022)\n\tanimation\030\005 \001(\0132\024.tec.proto.Animati"
    "onH\000\022!\n\005Scale\030\006 \001(\0132\020.tec.proto.ScaleH\000\022"
    "2\n\016collision_body\030\007 \001(\0132\030.tec.proto.Coll"
    "isionBodyH\000\022\'\n\010velocity\030\010 \001(\0132\023.tec.prot"
    "o.VelocityH\000\022.\n\014audio_source\030\t \001(\0132\026.tec"
    ".proto.AudioSourceH\000\022&\n\npointLight\030\n \001(\013"
    "2\020.tec.proto.LightH\000\022,\n\020directionalLight"
    "\030\013 \001(\0132\020.tec.proto.LightH\000\022%\n\tspotLight\030"
    "\014 \001(\0132\020.tec.proto.LightH\000\022.\n\013voxelVolume"
    "\030\r \001(\0132\027.tec.proto.VoxelVolumenH\000\022\'\n\010com"
    "puter\030\016 \001(\0132\023.tec.proto.ComputerH\000\022)\n\tlu"
    "aScript\030d \001(\0132\024.tec.proto.LuaScriptH\000B\013\n"
    "\tcomponent\">\n\006Entity\022\n\n\002id\030\001 \002(\004\022(\n\ncomp"
    "onents\030\002 \003(\0132\024.tec.proto.Component\"*\n\016En"
    "tityFileList\022\030\n\020entity_file_list\030\001 \003(\t", 2878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "components.proto", &protobuf_RegisterTypes);
  Renderable::default_instance_ = new Renderable();
  Position::default_instance_ = new Position();
  Position_CenterOffset::default_instance_ = new Position_CenterOffset();
  Orientation::default_instance_ = new Orientation();
  Orientation_RotationOffset::default_instance_ = new Orientation_RotationOffset();
  View::default_instance_ = new View();
  Animation::default_instance_ = new Animation();
  Scale::default_instance_ = new Scale();
  CollisionBody::default_instance_ = new CollisionBody();
  CollisionBody_default_oneof_instance_ = new CollisionBodyOneofInstance();
  CollisionBody_Box::default_instance_ = new CollisionBody_Box();
  CollisionBody_Sphere::default_instance_ = new CollisionBody_Sphere();
  CollisionBody_Capsule::default_instance_ = new CollisionBody_Capsule();
  Velocity::default_instance_ = new Velocity();
  AudioSource::default_instance_ = new AudioSource();
  Light::default_instance_ = new Light();
  Light_Attenuation::default_instance_ = new Light_Attenuation();
  Light_Direction::default_instance_ = new Light_Direction();
  LuaScript::default_instance_ = new LuaScript();
  VoxelVolumen::default_instance_ = new VoxelVolumen();
  ComputerScreen::default_instance_ = new ComputerScreen();
  Computer::default_instance_ = new Computer();
  Computer_Device::default_instance_ = new Computer_Device();
  Computer_Device_default_oneof_instance_ = new Computer_DeviceOneofInstance();
  Computer_CPU::default_instance_ = new Computer_CPU();
  Computer_CPU_default_oneof_instance_ = new Computer_CPUOneofInstance();
  Computer_CPU_TR3200::default_instance_ = new Computer_CPU_TR3200();
  Component::default_instance_ = new Component();
  Component_default_oneof_instance_ = new ComponentOneofInstance();
  Entity::default_instance_ = new Entity();
  EntityFileList::default_instance_ = new EntityFileList();
  Renderable::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Position_CenterOffset::default_instance_->InitAsDefaultInstance();
  Orientation::default_instance_->InitAsDefaultInstance();
  Orientation_RotationOffset::default_instance_->InitAsDefaultInstance();
  View::default_instance_->InitAsDefaultInstance();
  Animation::default_instance_->InitAsDefaultInstance();
  Scale::default_instance_->InitAsDefaultInstance();
  CollisionBody::default_instance_->InitAsDefaultInstance();
  CollisionBody_Box::default_instance_->InitAsDefaultInstance();
  CollisionBody_Sphere::default_instance_->InitAsDefaultInstance();
  CollisionBody_Capsule::default_instance_->InitAsDefaultInstance();
  Velocity::default_instance_->InitAsDefaultInstance();
  AudioSource::default_instance_->InitAsDefaultInstance();
  Light::default_instance_->InitAsDefaultInstance();
  Light_Attenuation::default_instance_->InitAsDefaultInstance();
  Light_Direction::default_instance_->InitAsDefaultInstance();
  LuaScript::default_instance_->InitAsDefaultInstance();
  VoxelVolumen::default_instance_->InitAsDefaultInstance();
  ComputerScreen::default_instance_->InitAsDefaultInstance();
  Computer::default_instance_->InitAsDefaultInstance();
  Computer_Device::default_instance_->InitAsDefaultInstance();
  Computer_CPU::default_instance_->InitAsDefaultInstance();
  Computer_CPU_TR3200::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  EntityFileList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_components_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_components_2eproto {
  StaticDescriptorInitializer_components_2eproto() {
    protobuf_AddDesc_components_2eproto();
  }
} static_descriptor_initializer_components_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Renderable::kShaderNameFieldNumber;
const int Renderable::kMeshNameFieldNumber;
const int Renderable::kHiddenFieldNumber;
#endif  // !_MSC_VER

Renderable::Renderable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Renderable)
}

void Renderable::InitAsDefaultInstance() {
}

Renderable::Renderable(const Renderable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Renderable)
}

void Renderable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Renderable::~Renderable() {
  // @@protoc_insertion_point(destructor:tec.proto.Renderable)
  SharedDtor();
}

void Renderable::SharedDtor() {
  shader_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Renderable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Renderable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Renderable_descriptor_;
}

const Renderable& Renderable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Renderable* Renderable::default_instance_ = NULL;

Renderable* Renderable::New(::google::protobuf::Arena* arena) const {
  Renderable* n = new Renderable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Renderable::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_shader_name()) {
      shader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mesh_name()) {
      mesh_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    hidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Renderable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Renderable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string shader_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shader_name().data(), this->shader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Renderable.shader_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mesh_name;
        break;
      }

      // optional string mesh_name = 2;
      case 2: {
        if (tag == 18) {
         parse_mesh_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mesh_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mesh_name().data(), this->mesh_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Renderable.mesh_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 3;
      case 3: {
        if (tag == 24) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Renderable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Renderable)
  return false;
#undef DO_
}

void Renderable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Renderable)
  // optional string shader_name = 1;
  if (has_shader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shader_name().data(), this->shader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.shader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shader_name(), output);
  }

  // optional string mesh_name = 2;
  if (has_mesh_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_name().data(), this->mesh_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.mesh_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mesh_name(), output);
  }

  // optional bool hidden = 3;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Renderable)
}

::google::protobuf::uint8* Renderable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Renderable)
  // optional string shader_name = 1;
  if (has_shader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shader_name().data(), this->shader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.shader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shader_name(), target);
  }

  // optional string mesh_name = 2;
  if (has_mesh_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_name().data(), this->mesh_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.mesh_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mesh_name(), target);
  }

  // optional bool hidden = 3;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Renderable)
  return target;
}

int Renderable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string shader_name = 1;
    if (has_shader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shader_name());
    }

    // optional string mesh_name = 2;
    if (has_mesh_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mesh_name());
    }

    // optional bool hidden = 3;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Renderable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Renderable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Renderable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Renderable::MergeFrom(const Renderable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shader_name()) {
      set_has_shader_name();
      shader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_name_);
    }
    if (from.has_mesh_name()) {
      set_has_mesh_name();
      mesh_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mesh_name_);
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Renderable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Renderable::CopyFrom(const Renderable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Renderable::IsInitialized() const {

  return true;
}

void Renderable::Swap(Renderable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Renderable::InternalSwap(Renderable* other) {
  shader_name_.Swap(&other->shader_name_);
  mesh_name_.Swap(&other->mesh_name_);
  std::swap(hidden_, other->hidden_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Renderable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Renderable_descriptor_;
  metadata.reflection = Renderable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Renderable

// optional string shader_name = 1;
bool Renderable::has_shader_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Renderable::set_has_shader_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Renderable::clear_has_shader_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Renderable::clear_shader_name() {
  shader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shader_name();
}
 const ::std::string& Renderable::shader_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.shader_name)
  return shader_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_shader_name(const ::std::string& value) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.shader_name)
}
 void Renderable::set_shader_name(const char* value) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Renderable.shader_name)
}
 void Renderable::set_shader_name(const char* value, size_t size) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Renderable.shader_name)
}
 ::std::string* Renderable::mutable_shader_name() {
  set_has_shader_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Renderable.shader_name)
  return shader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Renderable::release_shader_name() {
  clear_has_shader_name();
  return shader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_allocated_shader_name(::std::string* shader_name) {
  if (shader_name != NULL) {
    set_has_shader_name();
  } else {
    clear_has_shader_name();
  }
  shader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shader_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Renderable.shader_name)
}

// optional string mesh_name = 2;
bool Renderable::has_mesh_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Renderable::set_has_mesh_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Renderable::clear_has_mesh_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Renderable::clear_mesh_name() {
  mesh_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mesh_name();
}
 const ::std::string& Renderable::mesh_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.mesh_name)
  return mesh_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_mesh_name(const ::std::string& value) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.mesh_name)
}
 void Renderable::set_mesh_name(const char* value) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Renderable.mesh_name)
}
 void Renderable::set_mesh_name(const char* value, size_t size) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Renderable.mesh_name)
}
 ::std::string* Renderable::mutable_mesh_name() {
  set_has_mesh_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Renderable.mesh_name)
  return mesh_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Renderable::release_mesh_name() {
  clear_has_mesh_name();
  return mesh_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_allocated_mesh_name(::std::string* mesh_name) {
  if (mesh_name != NULL) {
    set_has_mesh_name();
  } else {
    clear_has_mesh_name();
  }
  mesh_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mesh_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Renderable.mesh_name)
}

// optional bool hidden = 3;
bool Renderable::has_hidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Renderable::set_has_hidden() {
  _has_bits_[0] |= 0x00000004u;
}
void Renderable::clear_has_hidden() {
  _has_bits_[0] &= ~0x00000004u;
}
void Renderable::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
 bool Renderable::hidden() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.hidden)
  return hidden_;
}
 void Renderable::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.hidden)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Position_CenterOffset::kXFieldNumber;
const int Position_CenterOffset::kYFieldNumber;
const int Position_CenterOffset::kZFieldNumber;
#endif  // !_MSC_VER

Position_CenterOffset::Position_CenterOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Position.CenterOffset)
}

void Position_CenterOffset::InitAsDefaultInstance() {
}

Position_CenterOffset::Position_CenterOffset(const Position_CenterOffset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Position.CenterOffset)
}

void Position_CenterOffset::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position_CenterOffset::~Position_CenterOffset() {
  // @@protoc_insertion_point(destructor:tec.proto.Position.CenterOffset)
  SharedDtor();
}

void Position_CenterOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position_CenterOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position_CenterOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_CenterOffset_descriptor_;
}

const Position_CenterOffset& Position_CenterOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Position_CenterOffset* Position_CenterOffset::default_instance_ = NULL;

Position_CenterOffset* Position_CenterOffset::New(::google::protobuf::Arena* arena) const {
  Position_CenterOffset* n = new Position_CenterOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position_CenterOffset::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position_CenterOffset*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Position_CenterOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Position.CenterOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Position.CenterOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Position.CenterOffset)
  return false;
#undef DO_
}

void Position_CenterOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Position.CenterOffset)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Position.CenterOffset)
}

::google::protobuf::uint8* Position_CenterOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Position.CenterOffset)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Position.CenterOffset)
  return target;
}

int Position_CenterOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position_CenterOffset::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position_CenterOffset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position_CenterOffset>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position_CenterOffset::MergeFrom(const Position_CenterOffset& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Position_CenterOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position_CenterOffset::CopyFrom(const Position_CenterOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position_CenterOffset::IsInitialized() const {

  return true;
}

void Position_CenterOffset::Swap(Position_CenterOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position_CenterOffset::InternalSwap(Position_CenterOffset* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position_CenterOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_CenterOffset_descriptor_;
  metadata.reflection = Position_CenterOffset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
const int Position::kOffsetFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Position)
}

void Position::InitAsDefaultInstance() {
  offset_ = const_cast< ::tec::proto::Position_CenterOffset*>(&::tec::proto::Position_CenterOffset::default_instance());
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:tec.proto.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(x_, y_);
    z_ = 0;
    if (has_offset()) {
      if (offset_ != NULL) offset_->::tec::proto::Position_CenterOffset::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_offset;
        break;
      }

      // optional .tec.proto.Position.CenterOffset offset = 4;
      case 4: {
        if (tag == 34) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Position)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional .tec.proto.Position.CenterOffset offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Position)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional .tec.proto.Position.CenterOffset offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->offset_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional .tec.proto.Position.CenterOffset offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->offset_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_offset()) {
      mutable_offset()->::tec::proto::Position_CenterOffset::MergeFrom(from.offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position_CenterOffset

// optional float x = 1;
bool Position_CenterOffset::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position_CenterOffset::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Position_CenterOffset::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position_CenterOffset::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Position_CenterOffset::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.CenterOffset.x)
  return x_;
}
 void Position_CenterOffset::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.CenterOffset.x)
}

// optional float y = 2;
bool Position_CenterOffset::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position_CenterOffset::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Position_CenterOffset::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position_CenterOffset::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Position_CenterOffset::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.CenterOffset.y)
  return y_;
}
 void Position_CenterOffset::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.CenterOffset.y)
}

// optional float z = 3;
bool Position_CenterOffset::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Position_CenterOffset::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Position_CenterOffset::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Position_CenterOffset::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Position_CenterOffset::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.CenterOffset.z)
  return z_;
}
 void Position_CenterOffset::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.CenterOffset.z)
}

// -------------------------------------------------------------------

// Position

// optional float x = 1;
bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Position::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.x)
  return x_;
}
 void Position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.x)
}

// optional float y = 2;
bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Position::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.y)
  return y_;
}
 void Position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.y)
}

// optional float z = 3;
bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Position::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.z)
  return z_;
}
 void Position::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.z)
}

// optional .tec.proto.Position.CenterOffset offset = 4;
bool Position::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Position::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void Position::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void Position::clear_offset() {
  if (offset_ != NULL) offset_->::tec::proto::Position_CenterOffset::Clear();
  clear_has_offset();
}
 const ::tec::proto::Position_CenterOffset& Position::offset() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
 ::tec::proto::Position_CenterOffset* Position::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    offset_ = new ::tec::proto::Position_CenterOffset;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Position.offset)
  return offset_;
}
 ::tec::proto::Position_CenterOffset* Position::release_offset() {
  clear_has_offset();
  ::tec::proto::Position_CenterOffset* temp = offset_;
  offset_ = NULL;
  return temp;
}
 void Position::set_allocated_offset(::tec::proto::Position_CenterOffset* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Position.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Orientation_RotationOffset::kXFieldNumber;
const int Orientation_RotationOffset::kYFieldNumber;
const int Orientation_RotationOffset::kZFieldNumber;
#endif  // !_MSC_VER

Orientation_RotationOffset::Orientation_RotationOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Orientation.RotationOffset)
}

void Orientation_RotationOffset::InitAsDefaultInstance() {
}

Orientation_RotationOffset::Orientation_RotationOffset(const Orientation_RotationOffset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Orientation.RotationOffset)
}

void Orientation_RotationOffset::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Orientation_RotationOffset::~Orientation_RotationOffset() {
  // @@protoc_insertion_point(destructor:tec.proto.Orientation.RotationOffset)
  SharedDtor();
}

void Orientation_RotationOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Orientation_RotationOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation_RotationOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Orientation_RotationOffset_descriptor_;
}

const Orientation_RotationOffset& Orientation_RotationOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Orientation_RotationOffset* Orientation_RotationOffset::default_instance_ = NULL;

Orientation_RotationOffset* Orientation_RotationOffset::New(::google::protobuf::Arena* arena) const {
  Orientation_RotationOffset* n = new Orientation_RotationOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation_RotationOffset::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Orientation_RotationOffset*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Orientation_RotationOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Orientation.RotationOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Orientation.RotationOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Orientation.RotationOffset)
  return false;
#undef DO_
}

void Orientation_RotationOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Orientation.RotationOffset)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Orientation.RotationOffset)
}

::google::protobuf::uint8* Orientation_RotationOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Orientation.RotationOffset)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Orientation.RotationOffset)
  return target;
}

int Orientation_RotationOffset::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int Orientation_RotationOffset::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation_RotationOffset::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Orientation_RotationOffset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation_RotationOffset>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Orientation_RotationOffset::MergeFrom(const Orientation_RotationOffset& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Orientation_RotationOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation_RotationOffset::CopyFrom(const Orientation_RotationOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_RotationOffset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Orientation_RotationOffset::Swap(Orientation_RotationOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation_RotationOffset::InternalSwap(Orientation_RotationOffset* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation_RotationOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Orientation_RotationOffset_descriptor_;
  metadata.reflection = Orientation_RotationOffset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Orientation::kXFieldNumber;
const int Orientation::kYFieldNumber;
const int Orientation::kZFieldNumber;
const int Orientation::kWFieldNumber;
const int Orientation::kOffsetFieldNumber;
#endif  // !_MSC_VER

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Orientation)
}

void Orientation::InitAsDefaultInstance() {
  offset_ = const_cast< ::tec::proto::Orientation_RotationOffset*>(&::tec::proto::Orientation_RotationOffset::default_instance());
}

Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Orientation)
}

void Orientation::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:tec.proto.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
  }
}

void Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Orientation_descriptor_;
}

const Orientation& Orientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Orientation* Orientation::default_instance_ = NULL;

Orientation* Orientation::New(::google::protobuf::Arena* arena) const {
  Orientation* n = new Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Orientation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(x_, w_);
    if (has_offset()) {
      if (offset_ != NULL) offset_->::tec::proto::Orientation_RotationOffset::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // required float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_offset;
        break;
      }

      // optional .tec.proto.Orientation.RotationOffset offset = 5;
      case 5: {
        if (tag == 42) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Orientation)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // optional .tec.proto.Orientation.RotationOffset offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Orientation)
}

::google::protobuf::uint8* Orientation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Orientation)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // optional .tec.proto.Orientation.RotationOffset offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->offset_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Orientation)
  return target;
}

int Orientation::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Orientation::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .tec.proto.Orientation.RotationOffset offset = 5;
  if (has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Orientation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_offset()) {
      mutable_offset()->::tec::proto::Orientation_RotationOffset::MergeFrom(from.offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_offset()) {
    if (!this->offset_->IsInitialized()) return false;
  }
  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Orientation_descriptor_;
  metadata.reflection = Orientation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Orientation_RotationOffset

// required float x = 1;
bool Orientation_RotationOffset::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Orientation_RotationOffset::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Orientation_RotationOffset::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Orientation_RotationOffset::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Orientation_RotationOffset::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.RotationOffset.x)
  return x_;
}
 void Orientation_RotationOffset::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.RotationOffset.x)
}

// required float y = 2;
bool Orientation_RotationOffset::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Orientation_RotationOffset::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Orientation_RotationOffset::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Orientation_RotationOffset::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Orientation_RotationOffset::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.RotationOffset.y)
  return y_;
}
 void Orientation_RotationOffset::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.RotationOffset.y)
}

// required float z = 3;
bool Orientation_RotationOffset::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Orientation_RotationOffset::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Orientation_RotationOffset::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Orientation_RotationOffset::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Orientation_RotationOffset::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.RotationOffset.z)
  return z_;
}
 void Orientation_RotationOffset::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.RotationOffset.z)
}

// -------------------------------------------------------------------

// Orientation

// required float x = 1;
bool Orientation::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Orientation::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Orientation::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Orientation::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Orientation::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.x)
  return x_;
}
 void Orientation::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.x)
}

// required float y = 2;
bool Orientation::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Orientation::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Orientation::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Orientation::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Orientation::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.y)
  return y_;
}
 void Orientation::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.y)
}

// required float z = 3;
bool Orientation::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Orientation::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Orientation::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Orientation::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Orientation::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.z)
  return z_;
}
 void Orientation::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.z)
}

// required float w = 4;
bool Orientation::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Orientation::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Orientation::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Orientation::clear_w() {
  w_ = 0;
  clear_has_w();
}
 float Orientation::w() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.w)
  return w_;
}
 void Orientation::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.w)
}

// optional .tec.proto.Orientation.RotationOffset offset = 5;
bool Orientation::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Orientation::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void Orientation::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void Orientation::clear_offset() {
  if (offset_ != NULL) offset_->::tec::proto::Orientation_RotationOffset::Clear();
  clear_has_offset();
}
 const ::tec::proto::Orientation_RotationOffset& Orientation::offset() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
 ::tec::proto::Orientation_RotationOffset* Orientation::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    offset_ = new ::tec::proto::Orientation_RotationOffset;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Orientation.offset)
  return offset_;
}
 ::tec::proto::Orientation_RotationOffset* Orientation::release_offset() {
  clear_has_offset();
  ::tec::proto::Orientation_RotationOffset* temp = offset_;
  offset_ = NULL;
  return temp;
}
 void Orientation::set_allocated_offset(::tec::proto::Orientation_RotationOffset* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Orientation.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int View::kActiveFieldNumber;
#endif  // !_MSC_VER

View::View()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.View)
}

void View::InitAsDefaultInstance() {
}

View::View(const View& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.View)
}

void View::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:tec.proto.View)
  SharedDtor();
}

void View::SharedDtor() {
  if (this != default_instance_) {
  }
}

void View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* View::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return View_descriptor_;
}

const View& View::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

View* View::default_instance_ = NULL;

View* View::New(::google::protobuf::Arena* arena) const {
  View* n = new View;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void View::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.View)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.View)
  return false;
#undef DO_
}

void View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.View)
  // optional bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.View)
}

::google::protobuf::uint8* View::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.View)
  // optional bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.View)
  return target;
}

int View::ByteSize() const {
  int total_size = 0;

  // optional bool active = 1;
  if (has_active()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void View::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const View* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const View>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void View::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {

  return true;
}

void View::Swap(View* other) {
  if (other == this) return;
  InternalSwap(other);
}
void View::InternalSwap(View* other) {
  std::swap(active_, other->active_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata View::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = View_descriptor_;
  metadata.reflection = View_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// View

// optional bool active = 1;
bool View::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void View::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
void View::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
void View::clear_active() {
  active_ = false;
  clear_has_active();
}
 bool View::active() const {
  // @@protoc_insertion_point(field_get:tec.proto.View.active)
  return active_;
}
 void View::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.View.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Animation::kAnimationNameFieldNumber;
#endif  // !_MSC_VER

Animation::Animation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Animation)
}

void Animation::InitAsDefaultInstance() {
}

Animation::Animation(const Animation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Animation)
}

void Animation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  animation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Animation::~Animation() {
  // @@protoc_insertion_point(destructor:tec.proto.Animation)
  SharedDtor();
}

void Animation::SharedDtor() {
  animation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Animation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Animation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Animation_descriptor_;
}

const Animation& Animation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Animation* Animation::default_instance_ = NULL;

Animation* Animation::New(::google::protobuf::Arena* arena) const {
  Animation* n = new Animation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Animation::Clear() {
  if (has_animation_name()) {
    animation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Animation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Animation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animation_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animation_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animation_name().data(), this->animation_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Animation.animation_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Animation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Animation)
  return false;
#undef DO_
}

void Animation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Animation)
  // optional string animation_name = 1;
  if (has_animation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_name().data(), this->animation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Animation.animation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animation_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Animation)
}

::google::protobuf::uint8* Animation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Animation)
  // optional string animation_name = 1;
  if (has_animation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_name().data(), this->animation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Animation.animation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animation_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Animation)
  return target;
}

int Animation::ByteSize() const {
  int total_size = 0;

  // optional string animation_name = 1;
  if (has_animation_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->animation_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Animation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Animation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Animation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Animation::MergeFrom(const Animation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animation_name()) {
      set_has_animation_name();
      animation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.animation_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Animation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Animation::CopyFrom(const Animation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {

  return true;
}

void Animation::Swap(Animation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Animation::InternalSwap(Animation* other) {
  animation_name_.Swap(&other->animation_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Animation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Animation_descriptor_;
  metadata.reflection = Animation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Animation

// optional string animation_name = 1;
bool Animation::has_animation_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Animation::set_has_animation_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Animation::clear_has_animation_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Animation::clear_animation_name() {
  animation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_animation_name();
}
 const ::std::string& Animation::animation_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Animation.animation_name)
  return animation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Animation::set_animation_name(const ::std::string& value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Animation.animation_name)
}
 void Animation::set_animation_name(const char* value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Animation.animation_name)
}
 void Animation::set_animation_name(const char* value, size_t size) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Animation.animation_name)
}
 ::std::string* Animation::mutable_animation_name() {
  set_has_animation_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Animation.animation_name)
  return animation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Animation::release_animation_name() {
  clear_has_animation_name();
  return animation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Animation::set_allocated_animation_name(::std::string* animation_name) {
  if (animation_name != NULL) {
    set_has_animation_name();
  } else {
    clear_has_animation_name();
  }
  animation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Animation.animation_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Scale::kXFieldNumber;
const int Scale::kYFieldNumber;
const int Scale::kZFieldNumber;
#endif  // !_MSC_VER

Scale::Scale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Scale)
}

void Scale::InitAsDefaultInstance() {
}

Scale::Scale(const Scale& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Scale)
}

void Scale::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scale::~Scale() {
  // @@protoc_insertion_point(destructor:tec.proto.Scale)
  SharedDtor();
}

void Scale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scale_descriptor_;
}

const Scale& Scale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Scale* Scale::default_instance_ = NULL;

Scale* Scale::New(::google::protobuf::Arena* arena) const {
  Scale* n = new Scale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scale::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Scale*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Scale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Scale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Scale)
  return false;
#undef DO_
}

void Scale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Scale)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Scale)
}

::google::protobuf::uint8* Scale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Scale)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Scale)
  return target;
}

int Scale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scale::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Scale* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scale>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scale::MergeFrom(const Scale& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scale::CopyFrom(const Scale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scale::IsInitialized() const {

  return true;
}

void Scale::Swap(Scale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scale::InternalSwap(Scale* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scale_descriptor_;
  metadata.reflection = Scale_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scale

// optional float x = 1;
bool Scale::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scale::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Scale::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scale::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Scale::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.x)
  return x_;
}
 void Scale::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.x)
}

// optional float y = 2;
bool Scale::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scale::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Scale::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scale::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Scale::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.y)
  return y_;
}
 void Scale::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.y)
}

// optional float z = 3;
bool Scale::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scale::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Scale::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scale::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Scale::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.z)
  return z_;
}
 void Scale::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CollisionBody_Box::kXExtentFieldNumber;
const int CollisionBody_Box::kYExtentFieldNumber;
const int CollisionBody_Box::kZExtentFieldNumber;
#endif  // !_MSC_VER

CollisionBody_Box::CollisionBody_Box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.CollisionBody.Box)
}

void CollisionBody_Box::InitAsDefaultInstance() {
}

CollisionBody_Box::CollisionBody_Box(const CollisionBody_Box& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.CollisionBody.Box)
}

void CollisionBody_Box::SharedCtor() {
  _cached_size_ = 0;
  x_extent_ = 0;
  y_extent_ = 0;
  z_extent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionBody_Box::~CollisionBody_Box() {
  // @@protoc_insertion_point(destructor:tec.proto.CollisionBody.Box)
  SharedDtor();
}

void CollisionBody_Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollisionBody_Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionBody_Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionBody_Box_descriptor_;
}

const CollisionBody_Box& CollisionBody_Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

CollisionBody_Box* CollisionBody_Box::default_instance_ = NULL;

CollisionBody_Box* CollisionBody_Box::New(::google::protobuf::Arena* arena) const {
  CollisionBody_Box* n = new CollisionBody_Box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionBody_Box::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollisionBody_Box*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_extent_, z_extent_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollisionBody_Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.CollisionBody.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_extent = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_extent_)));
          set_has_x_extent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_extent;
        break;
      }

      // required float y_extent = 2;
      case 2: {
        if (tag == 21) {
         parse_y_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_extent_)));
          set_has_y_extent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z_extent;
        break;
      }

      // required float z_extent = 3;
      case 3: {
        if (tag == 29) {
         parse_z_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_extent_)));
          set_has_z_extent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.CollisionBody.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.CollisionBody.Box)
  return false;
#undef DO_
}

void CollisionBody_Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.CollisionBody.Box)
  // required float x_extent = 1;
  if (has_x_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_extent(), output);
  }

  // required float y_extent = 2;
  if (has_y_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_extent(), output);
  }

  // required float z_extent = 3;
  if (has_z_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z_extent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.CollisionBody.Box)
}

::google::protobuf::uint8* CollisionBody_Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.CollisionBody.Box)
  // required float x_extent = 1;
  if (has_x_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_extent(), target);
  }

  // required float y_extent = 2;
  if (has_y_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_extent(), target);
  }

  // required float z_extent = 3;
  if (has_z_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z_extent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.CollisionBody.Box)
  return target;
}

int CollisionBody_Box::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x_extent()) {
    // required float x_extent = 1;
    total_size += 1 + 4;
  }

  if (has_y_extent()) {
    // required float y_extent = 2;
    total_size += 1 + 4;
  }

  if (has_z_extent()) {
    // required float z_extent = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int CollisionBody_Box::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x_extent = 1;
    total_size += 1 + 4;

    // required float y_extent = 2;
    total_size += 1 + 4;

    // required float z_extent = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionBody_Box::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CollisionBody_Box* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionBody_Box>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionBody_Box::MergeFrom(const CollisionBody_Box& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_extent()) {
      set_x_extent(from.x_extent());
    }
    if (from.has_y_extent()) {
      set_y_extent(from.y_extent());
    }
    if (from.has_z_extent()) {
      set_z_extent(from.z_extent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollisionBody_Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionBody_Box::CopyFrom(const CollisionBody_Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionBody_Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CollisionBody_Box::Swap(CollisionBody_Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionBody_Box::InternalSwap(CollisionBody_Box* other) {
  std::swap(x_extent_, other->x_extent_);
  std::swap(y_extent_, other->y_extent_);
  std::swap(z_extent_, other->z_extent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionBody_Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionBody_Box_descriptor_;
  metadata.reflection = CollisionBody_Box_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CollisionBody_Sphere::kRadiusFieldNumber;
#endif  // !_MSC_VER

CollisionBody_Sphere::CollisionBody_Sphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.CollisionBody.Sphere)
}

void CollisionBody_Sphere::InitAsDefaultInstance() {
}

CollisionBody_Sphere::CollisionBody_Sphere(const CollisionBody_Sphere& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.CollisionBody.Sphere)
}

void CollisionBody_Sphere::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionBody_Sphere::~CollisionBody_Sphere() {
  // @@protoc_insertion_point(destructor:tec.proto.CollisionBody.Sphere)
  SharedDtor();
}

void CollisionBody_Sphere::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollisionBody_Sphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionBody_Sphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionBody_Sphere_descriptor_;
}

const CollisionBody_Sphere& CollisionBody_Sphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

CollisionBody_Sphere* CollisionBody_Sphere::default_instance_ = NULL;

CollisionBody_Sphere* CollisionBody_Sphere::New(::google::protobuf::Arena* arena) const {
  CollisionBody_Sphere* n = new CollisionBody_Sphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionBody_Sphere::Clear() {
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollisionBody_Sphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.CollisionBody.Sphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float radius = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.CollisionBody.Sphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.CollisionBody.Sphere)
  return false;
#undef DO_
}

void CollisionBody_Sphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.CollisionBody.Sphere)
  // required float radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.CollisionBody.Sphere)
}

::google::protobuf::uint8* CollisionBody_Sphere::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.CollisionBody.Sphere)
  // required float radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.CollisionBody.Sphere)
  return target;
}

int CollisionBody_Sphere::ByteSize() const {
  int total_size = 0;

  // required float radius = 1;
  if (has_radius()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionBody_Sphere::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CollisionBody_Sphere* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionBody_Sphere>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionBody_Sphere::MergeFrom(const CollisionBody_Sphere& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollisionBody_Sphere::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionBody_Sphere::CopyFrom(const CollisionBody_Sphere& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionBody_Sphere::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CollisionBody_Sphere::Swap(CollisionBody_Sphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionBody_Sphere::InternalSwap(CollisionBody_Sphere* other) {
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionBody_Sphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionBody_Sphere_descriptor_;
  metadata.reflection = CollisionBody_Sphere_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CollisionBody_Capsule::kRadiusFieldNumber;
const int CollisionBody_Capsule::kHeightFieldNumber;
#endif  // !_MSC_VER

CollisionBody_Capsule::CollisionBody_Capsule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.CollisionBody.Capsule)
}

void CollisionBody_Capsule::InitAsDefaultInstance() {
}

CollisionBody_Capsule::CollisionBody_Capsule(const CollisionBody_Capsule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.CollisionBody.Capsule)
}

void CollisionBody_Capsule::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionBody_Capsule::~CollisionBody_Capsule() {
  // @@protoc_insertion_point(destructor:tec.proto.CollisionBody.Capsule)
  SharedDtor();
}

void CollisionBody_Capsule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollisionBody_Capsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionBody_Capsule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionBody_Capsule_descriptor_;
}

const CollisionBody_Capsule& CollisionBody_Capsule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

CollisionBody_Capsule* CollisionBody_Capsule::default_instance_ = NULL;

CollisionBody_Capsule* CollisionBody_Capsule::New(::google::protobuf::Arena* arena) const {
  CollisionBody_Capsule* n = new CollisionBody_Capsule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionBody_Capsule::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollisionBody_Capsule*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(radius_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollisionBody_Capsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.CollisionBody.Capsule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float radius = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.CollisionBody.Capsule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.CollisionBody.Capsule)
  return false;
#undef DO_
}

void CollisionBody_Capsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.CollisionBody.Capsule)
  // required float radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.CollisionBody.Capsule)
}

::google::protobuf::uint8* CollisionBody_Capsule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.CollisionBody.Capsule)
  // required float radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // required float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.CollisionBody.Capsule)
  return target;
}

int CollisionBody_Capsule::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_radius()) {
    // required float radius = 1;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
int CollisionBody_Capsule::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float radius = 1;
    total_size += 1 + 4;

    // required float height = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionBody_Capsule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CollisionBody_Capsule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionBody_Capsule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionBody_Capsule::MergeFrom(const CollisionBody_Capsule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollisionBody_Capsule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionBody_Capsule::CopyFrom(const CollisionBody_Capsule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionBody_Capsule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CollisionBody_Capsule::Swap(CollisionBody_Capsule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionBody_Capsule::InternalSwap(CollisionBody_Capsule* other) {
  std::swap(radius_, other->radius_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionBody_Capsule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionBody_Capsule_descriptor_;
  metadata.reflection = CollisionBody_Capsule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CollisionBody::kDisableDeactivationFieldNumber;
const int CollisionBody::kDisableRotationFieldNumber;
const int CollisionBody::kBoxFieldNumber;
const int CollisionBody::kSphereFieldNumber;
const int CollisionBody::kCapsuleFieldNumber;
const int CollisionBody::kMassFieldNumber;
#endif  // !_MSC_VER

CollisionBody::CollisionBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.CollisionBody)
}

void CollisionBody::InitAsDefaultInstance() {
  CollisionBody_default_oneof_instance_->box_ = const_cast< ::tec::proto::CollisionBody_Box*>(&::tec::proto::CollisionBody_Box::default_instance());
  CollisionBody_default_oneof_instance_->sphere_ = const_cast< ::tec::proto::CollisionBody_Sphere*>(&::tec::proto::CollisionBody_Sphere::default_instance());
  CollisionBody_default_oneof_instance_->capsule_ = const_cast< ::tec::proto::CollisionBody_Capsule*>(&::tec::proto::CollisionBody_Capsule::default_instance());
}

CollisionBody::CollisionBody(const CollisionBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.CollisionBody)
}

void CollisionBody::SharedCtor() {
  _cached_size_ = 0;
  disable_deactivation_ = false;
  disable_rotation_ = false;
  mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_shape();
}

CollisionBody::~CollisionBody() {
  // @@protoc_insertion_point(destructor:tec.proto.CollisionBody)
  SharedDtor();
}

void CollisionBody::SharedDtor() {
  if (has_shape()) {
    clear_shape();
  }
  if (this != default_instance_) {
  }
}

void CollisionBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionBody_descriptor_;
}

const CollisionBody& CollisionBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

CollisionBody* CollisionBody::default_instance_ = NULL;

CollisionBody* CollisionBody::New(::google::protobuf::Arena* arena) const {
  CollisionBody* n = new CollisionBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CollisionBody::clear_shape() {
  switch(shape_case()) {
    case kBox: {
      delete shape_.box_;
      break;
    }
    case kSphere: {
      delete shape_.sphere_;
      break;
    }
    case kCapsule: {
      delete shape_.capsule_;
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHAPE_NOT_SET;
}


void CollisionBody::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CollisionBody*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(disable_deactivation_, mass_);

#undef ZR_HELPER_
#undef ZR_

  clear_shape();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CollisionBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.CollisionBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disable_deactivation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_deactivation_)));
          set_has_disable_deactivation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_disable_rotation;
        break;
      }

      // optional bool disable_rotation = 2;
      case 2: {
        if (tag == 16) {
         parse_disable_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_rotation_)));
          set_has_disable_rotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box;
        break;
      }

      // optional .tec.proto.CollisionBody.Box box = 3;
      case 3: {
        if (tag == 26) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sphere;
        break;
      }

      // optional .tec.proto.CollisionBody.Sphere sphere = 4;
      case 4: {
        if (tag == 34) {
         parse_sphere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sphere()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_capsule;
        break;
      }

      // optional .tec.proto.CollisionBody.Capsule capsule = 5;
      case 5: {
        if (tag == 42) {
         parse_capsule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capsule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_mass;
        break;
      }

      // optional float mass = 6;
      case 6: {
        if (tag == 53) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.CollisionBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.CollisionBody)
  return false;
#undef DO_
}

void CollisionBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.CollisionBody)
  // optional bool disable_deactivation = 1;
  if (has_disable_deactivation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_deactivation(), output);
  }

  // optional bool disable_rotation = 2;
  if (has_disable_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_rotation(), output);
  }

  // optional .tec.proto.CollisionBody.Box box = 3;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *shape_.box_, output);
  }

  // optional .tec.proto.CollisionBody.Sphere sphere = 4;
  if (has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *shape_.sphere_, output);
  }

  // optional .tec.proto.CollisionBody.Capsule capsule = 5;
  if (has_capsule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *shape_.capsule_, output);
  }

  // optional float mass = 6;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mass(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.CollisionBody)
}

::google::protobuf::uint8* CollisionBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.CollisionBody)
  // optional bool disable_deactivation = 1;
  if (has_disable_deactivation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_deactivation(), target);
  }

  // optional bool disable_rotation = 2;
  if (has_disable_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_rotation(), target);
  }

  // optional .tec.proto.CollisionBody.Box box = 3;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *shape_.box_, target);
  }

  // optional .tec.proto.CollisionBody.Sphere sphere = 4;
  if (has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *shape_.sphere_, target);
  }

  // optional .tec.proto.CollisionBody.Capsule capsule = 5;
  if (has_capsule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *shape_.capsule_, target);
  }

  // optional float mass = 6;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mass(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.CollisionBody)
  return target;
}

int CollisionBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 35u) {
    // optional bool disable_deactivation = 1;
    if (has_disable_deactivation()) {
      total_size += 1 + 1;
    }

    // optional bool disable_rotation = 2;
    if (has_disable_rotation()) {
      total_size += 1 + 1;
    }

    // optional float mass = 6;
    if (has_mass()) {
      total_size += 1 + 4;
    }

  }
  switch (shape_case()) {
    // optional .tec.proto.CollisionBody.Box box = 3;
    case kBox: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *shape_.box_);
      break;
    }
    // optional .tec.proto.CollisionBody.Sphere sphere = 4;
    case kSphere: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *shape_.sphere_);
      break;
    }
    // optional .tec.proto.CollisionBody.Capsule capsule = 5;
    case kCapsule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *shape_.capsule_);
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionBody::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CollisionBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionBody>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionBody::MergeFrom(const CollisionBody& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.shape_case()) {
    case kBox: {
      mutable_box()->::tec::proto::CollisionBody_Box::MergeFrom(from.box());
      break;
    }
    case kSphere: {
      mutable_sphere()->::tec::proto::CollisionBody_Sphere::MergeFrom(from.sphere());
      break;
    }
    case kCapsule: {
      mutable_capsule()->::tec::proto::CollisionBody_Capsule::MergeFrom(from.capsule());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disable_deactivation()) {
      set_disable_deactivation(from.disable_deactivation());
    }
    if (from.has_disable_rotation()) {
      set_disable_rotation(from.disable_rotation());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CollisionBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionBody::CopyFrom(const CollisionBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionBody::IsInitialized() const {

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  if (has_sphere()) {
    if (!this->sphere().IsInitialized()) return false;
  }
  if (has_capsule()) {
    if (!this->capsule().IsInitialized()) return false;
  }
  return true;
}

void CollisionBody::Swap(CollisionBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionBody::InternalSwap(CollisionBody* other) {
  std::swap(disable_deactivation_, other->disable_deactivation_);
  std::swap(disable_rotation_, other->disable_rotation_);
  std::swap(mass_, other->mass_);
  std::swap(shape_, other->shape_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollisionBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionBody_descriptor_;
  metadata.reflection = CollisionBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollisionBody_Box

// required float x_extent = 1;
bool CollisionBody_Box::has_x_extent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionBody_Box::set_has_x_extent() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionBody_Box::clear_has_x_extent() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionBody_Box::clear_x_extent() {
  x_extent_ = 0;
  clear_has_x_extent();
}
 float CollisionBody_Box::x_extent() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Box.x_extent)
  return x_extent_;
}
 void CollisionBody_Box::set_x_extent(float value) {
  set_has_x_extent();
  x_extent_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Box.x_extent)
}

// required float y_extent = 2;
bool CollisionBody_Box::has_y_extent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollisionBody_Box::set_has_y_extent() {
  _has_bits_[0] |= 0x00000002u;
}
void CollisionBody_Box::clear_has_y_extent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollisionBody_Box::clear_y_extent() {
  y_extent_ = 0;
  clear_has_y_extent();
}
 float CollisionBody_Box::y_extent() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Box.y_extent)
  return y_extent_;
}
 void CollisionBody_Box::set_y_extent(float value) {
  set_has_y_extent();
  y_extent_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Box.y_extent)
}

// required float z_extent = 3;
bool CollisionBody_Box::has_z_extent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CollisionBody_Box::set_has_z_extent() {
  _has_bits_[0] |= 0x00000004u;
}
void CollisionBody_Box::clear_has_z_extent() {
  _has_bits_[0] &= ~0x00000004u;
}
void CollisionBody_Box::clear_z_extent() {
  z_extent_ = 0;
  clear_has_z_extent();
}
 float CollisionBody_Box::z_extent() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Box.z_extent)
  return z_extent_;
}
 void CollisionBody_Box::set_z_extent(float value) {
  set_has_z_extent();
  z_extent_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Box.z_extent)
}

// -------------------------------------------------------------------

// CollisionBody_Sphere

// required float radius = 1;
bool CollisionBody_Sphere::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionBody_Sphere::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionBody_Sphere::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionBody_Sphere::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float CollisionBody_Sphere::radius() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Sphere.radius)
  return radius_;
}
 void CollisionBody_Sphere::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Sphere.radius)
}

// -------------------------------------------------------------------

// CollisionBody_Capsule

// required float radius = 1;
bool CollisionBody_Capsule::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionBody_Capsule::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionBody_Capsule::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionBody_Capsule::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float CollisionBody_Capsule::radius() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Capsule.radius)
  return radius_;
}
 void CollisionBody_Capsule::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Capsule.radius)
}

// required float height = 2;
bool CollisionBody_Capsule::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollisionBody_Capsule::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void CollisionBody_Capsule::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollisionBody_Capsule::clear_height() {
  height_ = 0;
  clear_has_height();
}
 float CollisionBody_Capsule::height() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.Capsule.height)
  return height_;
}
 void CollisionBody_Capsule::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.Capsule.height)
}

// -------------------------------------------------------------------

// CollisionBody

// optional bool disable_deactivation = 1;
bool CollisionBody::has_disable_deactivation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CollisionBody::set_has_disable_deactivation() {
  _has_bits_[0] |= 0x00000001u;
}
void CollisionBody::clear_has_disable_deactivation() {
  _has_bits_[0] &= ~0x00000001u;
}
void CollisionBody::clear_disable_deactivation() {
  disable_deactivation_ = false;
  clear_has_disable_deactivation();
}
 bool CollisionBody::disable_deactivation() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.disable_deactivation)
  return disable_deactivation_;
}
 void CollisionBody::set_disable_deactivation(bool value) {
  set_has_disable_deactivation();
  disable_deactivation_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.disable_deactivation)
}

// optional bool disable_rotation = 2;
bool CollisionBody::has_disable_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CollisionBody::set_has_disable_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void CollisionBody::clear_has_disable_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void CollisionBody::clear_disable_rotation() {
  disable_rotation_ = false;
  clear_has_disable_rotation();
}
 bool CollisionBody::disable_rotation() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.disable_rotation)
  return disable_rotation_;
}
 void CollisionBody::set_disable_rotation(bool value) {
  set_has_disable_rotation();
  disable_rotation_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.disable_rotation)
}

// optional .tec.proto.CollisionBody.Box box = 3;
bool CollisionBody::has_box() const {
  return shape_case() == kBox;
}
void CollisionBody::set_has_box() {
  _oneof_case_[0] = kBox;
}
void CollisionBody::clear_box() {
  if (has_box()) {
    delete shape_.box_;
    clear_has_shape();
  }
}
 const ::tec::proto::CollisionBody_Box& CollisionBody::box() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.box)
  return has_box() ? *shape_.box_
                      : ::tec::proto::CollisionBody_Box::default_instance();
}
 ::tec::proto::CollisionBody_Box* CollisionBody::mutable_box() {
  if (!has_box()) {
    clear_shape();
    set_has_box();
    shape_.box_ = new ::tec::proto::CollisionBody_Box;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.CollisionBody.box)
  return shape_.box_;
}
 ::tec::proto::CollisionBody_Box* CollisionBody::release_box() {
  if (has_box()) {
    clear_has_shape();
    ::tec::proto::CollisionBody_Box* temp = shape_.box_;
    shape_.box_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CollisionBody::set_allocated_box(::tec::proto::CollisionBody_Box* box) {
  clear_shape();
  if (box) {
    set_has_box();
    shape_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.CollisionBody.box)
}

// optional .tec.proto.CollisionBody.Sphere sphere = 4;
bool CollisionBody::has_sphere() const {
  return shape_case() == kSphere;
}
void CollisionBody::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
void CollisionBody::clear_sphere() {
  if (has_sphere()) {
    delete shape_.sphere_;
    clear_has_shape();
  }
}
 const ::tec::proto::CollisionBody_Sphere& CollisionBody::sphere() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.sphere)
  return has_sphere() ? *shape_.sphere_
                      : ::tec::proto::CollisionBody_Sphere::default_instance();
}
 ::tec::proto::CollisionBody_Sphere* CollisionBody::mutable_sphere() {
  if (!has_sphere()) {
    clear_shape();
    set_has_sphere();
    shape_.sphere_ = new ::tec::proto::CollisionBody_Sphere;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.CollisionBody.sphere)
  return shape_.sphere_;
}
 ::tec::proto::CollisionBody_Sphere* CollisionBody::release_sphere() {
  if (has_sphere()) {
    clear_has_shape();
    ::tec::proto::CollisionBody_Sphere* temp = shape_.sphere_;
    shape_.sphere_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CollisionBody::set_allocated_sphere(::tec::proto::CollisionBody_Sphere* sphere) {
  clear_shape();
  if (sphere) {
    set_has_sphere();
    shape_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.CollisionBody.sphere)
}

// optional .tec.proto.CollisionBody.Capsule capsule = 5;
bool CollisionBody::has_capsule() const {
  return shape_case() == kCapsule;
}
void CollisionBody::set_has_capsule() {
  _oneof_case_[0] = kCapsule;
}
void CollisionBody::clear_capsule() {
  if (has_capsule()) {
    delete shape_.capsule_;
    clear_has_shape();
  }
}
 const ::tec::proto::CollisionBody_Capsule& CollisionBody::capsule() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.capsule)
  return has_capsule() ? *shape_.capsule_
                      : ::tec::proto::CollisionBody_Capsule::default_instance();
}
 ::tec::proto::CollisionBody_Capsule* CollisionBody::mutable_capsule() {
  if (!has_capsule()) {
    clear_shape();
    set_has_capsule();
    shape_.capsule_ = new ::tec::proto::CollisionBody_Capsule;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.CollisionBody.capsule)
  return shape_.capsule_;
}
 ::tec::proto::CollisionBody_Capsule* CollisionBody::release_capsule() {
  if (has_capsule()) {
    clear_has_shape();
    ::tec::proto::CollisionBody_Capsule* temp = shape_.capsule_;
    shape_.capsule_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void CollisionBody::set_allocated_capsule(::tec::proto::CollisionBody_Capsule* capsule) {
  clear_shape();
  if (capsule) {
    set_has_capsule();
    shape_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.CollisionBody.capsule)
}

// optional float mass = 6;
bool CollisionBody::has_mass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CollisionBody::set_has_mass() {
  _has_bits_[0] |= 0x00000020u;
}
void CollisionBody::clear_has_mass() {
  _has_bits_[0] &= ~0x00000020u;
}
void CollisionBody::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
 float CollisionBody::mass() const {
  // @@protoc_insertion_point(field_get:tec.proto.CollisionBody.mass)
  return mass_;
}
 void CollisionBody::set_mass(float value) {
  set_has_mass();
  mass_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.CollisionBody.mass)
}

bool CollisionBody::has_shape() const {
  return shape_case() != SHAPE_NOT_SET;
}
void CollisionBody::clear_has_shape() {
  _oneof_case_[0] = SHAPE_NOT_SET;
}
CollisionBody::ShapeCase CollisionBody::shape_case() const {
  return CollisionBody::ShapeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Velocity::kLinearXFieldNumber;
const int Velocity::kLinearYFieldNumber;
const int Velocity::kLinearZFieldNumber;
const int Velocity::kAngularXFieldNumber;
const int Velocity::kAngularYFieldNumber;
const int Velocity::kAngularZFieldNumber;
#endif  // !_MSC_VER

Velocity::Velocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Velocity)
}

void Velocity::InitAsDefaultInstance() {
}

Velocity::Velocity(const Velocity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Velocity)
}

void Velocity::SharedCtor() {
  _cached_size_ = 0;
  linear_x_ = 0;
  linear_y_ = 0;
  linear_z_ = 0;
  angular_x_ = 0;
  angular_y_ = 0;
  angular_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:tec.proto.Velocity)
  SharedDtor();
}

void Velocity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Velocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocity_descriptor_;
}

const Velocity& Velocity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Velocity* Velocity::default_instance_ = NULL;

Velocity* Velocity::New(::google::protobuf::Arena* arena) const {
  Velocity* n = new Velocity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Velocity::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Velocity*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(linear_x_, angular_z_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Velocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Velocity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float linear_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_x_)));
          set_has_linear_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_linear_y;
        break;
      }

      // optional float linear_y = 2;
      case 2: {
        if (tag == 21) {
         parse_linear_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_y_)));
          set_has_linear_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_linear_z;
        break;
      }

      // optional float linear_z = 3;
      case 3: {
        if (tag == 29) {
         parse_linear_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_z_)));
          set_has_linear_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_angular_x;
        break;
      }

      // optional float angular_x = 4;
      case 4: {
        if (tag == 37) {
         parse_angular_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x_)));
          set_has_angular_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_angular_y;
        break;
      }

      // optional float angular_y = 5;
      case 5: {
        if (tag == 45) {
         parse_angular_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y_)));
          set_has_angular_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_angular_z;
        break;
      }

      // optional float angular_z = 6;
      case 6: {
        if (tag == 53) {
         parse_angular_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z_)));
          set_has_angular_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Velocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Velocity)
  return false;
#undef DO_
}

void Velocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Velocity)
  // optional float linear_x = 1;
  if (has_linear_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->linear_x(), output);
  }

  // optional float linear_y = 2;
  if (has_linear_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->linear_y(), output);
  }

  // optional float linear_z = 3;
  if (has_linear_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->linear_z(), output);
  }

  // optional float angular_x = 4;
  if (has_angular_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angular_x(), output);
  }

  // optional float angular_y = 5;
  if (has_angular_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angular_y(), output);
  }

  // optional float angular_z = 6;
  if (has_angular_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angular_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Velocity)
}

::google::protobuf::uint8* Velocity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Velocity)
  // optional float linear_x = 1;
  if (has_linear_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->linear_x(), target);
  }

  // optional float linear_y = 2;
  if (has_linear_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->linear_y(), target);
  }

  // optional float linear_z = 3;
  if (has_linear_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->linear_z(), target);
  }

  // optional float angular_x = 4;
  if (has_angular_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angular_x(), target);
  }

  // optional float angular_y = 5;
  if (has_angular_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angular_y(), target);
  }

  // optional float angular_z = 6;
  if (has_angular_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angular_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Velocity)
  return target;
}

int Velocity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float linear_x = 1;
    if (has_linear_x()) {
      total_size += 1 + 4;
    }

    // optional float linear_y = 2;
    if (has_linear_y()) {
      total_size += 1 + 4;
    }

    // optional float linear_z = 3;
    if (has_linear_z()) {
      total_size += 1 + 4;
    }

    // optional float angular_x = 4;
    if (has_angular_x()) {
      total_size += 1 + 4;
    }

    // optional float angular_y = 5;
    if (has_angular_y()) {
      total_size += 1 + 4;
    }

    // optional float angular_z = 6;
    if (has_angular_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Velocity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear_x()) {
      set_linear_x(from.linear_x());
    }
    if (from.has_linear_y()) {
      set_linear_y(from.linear_y());
    }
    if (from.has_linear_z()) {
      set_linear_z(from.linear_z());
    }
    if (from.has_angular_x()) {
      set_angular_x(from.angular_x());
    }
    if (from.has_angular_y()) {
      set_angular_y(from.angular_y());
    }
    if (from.has_angular_z()) {
      set_angular_z(from.angular_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Velocity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {

  return true;
}

void Velocity::Swap(Velocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity::InternalSwap(Velocity* other) {
  std::swap(linear_x_, other->linear_x_);
  std::swap(linear_y_, other->linear_y_);
  std::swap(linear_z_, other->linear_z_);
  std::swap(angular_x_, other->angular_x_);
  std::swap(angular_y_, other->angular_y_);
  std::swap(angular_z_, other->angular_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Velocity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocity_descriptor_;
  metadata.reflection = Velocity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Velocity

// optional float linear_x = 1;
bool Velocity::has_linear_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Velocity::set_has_linear_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Velocity::clear_has_linear_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Velocity::clear_linear_x() {
  linear_x_ = 0;
  clear_has_linear_x();
}
 float Velocity::linear_x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.linear_x)
  return linear_x_;
}
 void Velocity::set_linear_x(float value) {
  set_has_linear_x();
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.linear_x)
}

// optional float linear_y = 2;
bool Velocity::has_linear_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Velocity::set_has_linear_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Velocity::clear_has_linear_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Velocity::clear_linear_y() {
  linear_y_ = 0;
  clear_has_linear_y();
}
 float Velocity::linear_y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.linear_y)
  return linear_y_;
}
 void Velocity::set_linear_y(float value) {
  set_has_linear_y();
  linear_y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.linear_y)
}

// optional float linear_z = 3;
bool Velocity::has_linear_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Velocity::set_has_linear_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Velocity::clear_has_linear_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Velocity::clear_linear_z() {
  linear_z_ = 0;
  clear_has_linear_z();
}
 float Velocity::linear_z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.linear_z)
  return linear_z_;
}
 void Velocity::set_linear_z(float value) {
  set_has_linear_z();
  linear_z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.linear_z)
}

// optional float angular_x = 4;
bool Velocity::has_angular_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Velocity::set_has_angular_x() {
  _has_bits_[0] |= 0x00000008u;
}
void Velocity::clear_has_angular_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void Velocity::clear_angular_x() {
  angular_x_ = 0;
  clear_has_angular_x();
}
 float Velocity::angular_x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.angular_x)
  return angular_x_;
}
 void Velocity::set_angular_x(float value) {
  set_has_angular_x();
  angular_x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.angular_x)
}

// optional float angular_y = 5;
bool Velocity::has_angular_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Velocity::set_has_angular_y() {
  _has_bits_[0] |= 0x00000010u;
}
void Velocity::clear_has_angular_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void Velocity::clear_angular_y() {
  angular_y_ = 0;
  clear_has_angular_y();
}
 float Velocity::angular_y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.angular_y)
  return angular_y_;
}
 void Velocity::set_angular_y(float value) {
  set_has_angular_y();
  angular_y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.angular_y)
}

// optional float angular_z = 6;
bool Velocity::has_angular_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Velocity::set_has_angular_z() {
  _has_bits_[0] |= 0x00000020u;
}
void Velocity::clear_has_angular_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void Velocity::clear_angular_z() {
  angular_z_ = 0;
  clear_has_angular_z();
}
 float Velocity::angular_z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Velocity.angular_z)
  return angular_z_;
}
 void Velocity::set_angular_z(float value) {
  set_has_angular_z();
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Velocity.angular_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AudioSource::kLoopingFieldNumber;
const int AudioSource::kAudioNameFieldNumber;
const int AudioSource::kPlayingFieldNumber;
const int AudioSource::kVolumeFieldNumber;
#endif  // !_MSC_VER

AudioSource::AudioSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.AudioSource)
}

void AudioSource::InitAsDefaultInstance() {
}

AudioSource::AudioSource(const AudioSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.AudioSource)
}

void AudioSource::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  looping_ = false;
  audio_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playing_ = false;
  volume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioSource::~AudioSource() {
  // @@protoc_insertion_point(destructor:tec.proto.AudioSource)
  SharedDtor();
}

void AudioSource::SharedDtor() {
  audio_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AudioSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioSource_descriptor_;
}

const AudioSource& AudioSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

AudioSource* AudioSource::default_instance_ = NULL;

AudioSource* AudioSource::New(::google::protobuf::Arena* arena) const {
  AudioSource* n = new AudioSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioSource::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AudioSource*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(looping_, volume_);
    if (has_audio_name()) {
      audio_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AudioSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.AudioSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool looping = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &looping_)));
          set_has_looping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio_name;
        break;
      }

      // optional string audio_name = 2;
      case 2: {
        if (tag == 18) {
         parse_audio_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audio_name().data(), this->audio_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.AudioSource.audio_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playing;
        break;
      }

      // optional bool playing = 3;
      case 3: {
        if (tag == 24) {
         parse_playing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playing_)));
          set_has_playing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional uint32 volume = 4;
      case 4: {
        if (tag == 32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.AudioSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.AudioSource)
  return false;
#undef DO_
}

void AudioSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.AudioSource)
  // optional bool looping = 1;
  if (has_looping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->looping(), output);
  }

  // optional string audio_name = 2;
  if (has_audio_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_name().data(), this->audio_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.AudioSource.audio_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audio_name(), output);
  }

  // optional bool playing = 3;
  if (has_playing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->playing(), output);
  }

  // optional uint32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.AudioSource)
}

::google::protobuf::uint8* AudioSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.AudioSource)
  // optional bool looping = 1;
  if (has_looping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->looping(), target);
  }

  // optional string audio_name = 2;
  if (has_audio_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audio_name().data(), this->audio_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.AudioSource.audio_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audio_name(), target);
  }

  // optional bool playing = 3;
  if (has_playing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->playing(), target);
  }

  // optional uint32 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.AudioSource)
  return target;
}

int AudioSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool looping = 1;
    if (has_looping()) {
      total_size += 1 + 1;
    }

    // optional string audio_name = 2;
    if (has_audio_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audio_name());
    }

    // optional bool playing = 3;
    if (has_playing()) {
      total_size += 1 + 1;
    }

    // optional uint32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioSource::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AudioSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioSource>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioSource::MergeFrom(const AudioSource& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_looping()) {
      set_looping(from.looping());
    }
    if (from.has_audio_name()) {
      set_has_audio_name();
      audio_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_name_);
    }
    if (from.has_playing()) {
      set_playing(from.playing());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AudioSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioSource::CopyFrom(const AudioSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSource::IsInitialized() const {

  return true;
}

void AudioSource::Swap(AudioSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioSource::InternalSwap(AudioSource* other) {
  std::swap(looping_, other->looping_);
  audio_name_.Swap(&other->audio_name_);
  std::swap(playing_, other->playing_);
  std::swap(volume_, other->volume_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioSource_descriptor_;
  metadata.reflection = AudioSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioSource

// optional bool looping = 1;
bool AudioSource::has_looping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioSource::set_has_looping() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioSource::clear_has_looping() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioSource::clear_looping() {
  looping_ = false;
  clear_has_looping();
}
 bool AudioSource::looping() const {
  // @@protoc_insertion_point(field_get:tec.proto.AudioSource.looping)
  return looping_;
}
 void AudioSource::set_looping(bool value) {
  set_has_looping();
  looping_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.AudioSource.looping)
}

// optional string audio_name = 2;
bool AudioSource::has_audio_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioSource::set_has_audio_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioSource::clear_has_audio_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioSource::clear_audio_name() {
  audio_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_name();
}
 const ::std::string& AudioSource::audio_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.AudioSource.audio_name)
  return audio_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioSource::set_audio_name(const ::std::string& value) {
  set_has_audio_name();
  audio_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.AudioSource.audio_name)
}
 void AudioSource::set_audio_name(const char* value) {
  set_has_audio_name();
  audio_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.AudioSource.audio_name)
}
 void AudioSource::set_audio_name(const char* value, size_t size) {
  set_has_audio_name();
  audio_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.AudioSource.audio_name)
}
 ::std::string* AudioSource::mutable_audio_name() {
  set_has_audio_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.AudioSource.audio_name)
  return audio_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AudioSource::release_audio_name() {
  clear_has_audio_name();
  return audio_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioSource::set_allocated_audio_name(::std::string* audio_name) {
  if (audio_name != NULL) {
    set_has_audio_name();
  } else {
    clear_has_audio_name();
  }
  audio_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.AudioSource.audio_name)
}

// optional bool playing = 3;
bool AudioSource::has_playing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioSource::set_has_playing() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioSource::clear_has_playing() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioSource::clear_playing() {
  playing_ = false;
  clear_has_playing();
}
 bool AudioSource::playing() const {
  // @@protoc_insertion_point(field_get:tec.proto.AudioSource.playing)
  return playing_;
}
 void AudioSource::set_playing(bool value) {
  set_has_playing();
  playing_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.AudioSource.playing)
}

// optional uint32 volume = 4;
bool AudioSource::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AudioSource::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
void AudioSource::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
void AudioSource::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
 ::google::protobuf::uint32 AudioSource::volume() const {
  // @@protoc_insertion_point(field_get:tec.proto.AudioSource.volume)
  return volume_;
}
 void AudioSource::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.AudioSource.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Light_Attenuation::kConstantFieldNumber;
const int Light_Attenuation::kLinearFieldNumber;
const int Light_Attenuation::kExponentialFieldNumber;
#endif  // !_MSC_VER

Light_Attenuation::Light_Attenuation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Light.Attenuation)
}

void Light_Attenuation::InitAsDefaultInstance() {
}

Light_Attenuation::Light_Attenuation(const Light_Attenuation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Light.Attenuation)
}

void Light_Attenuation::SharedCtor() {
  _cached_size_ = 0;
  constant_ = 0;
  linear_ = 0;
  exponential_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Light_Attenuation::~Light_Attenuation() {
  // @@protoc_insertion_point(destructor:tec.proto.Light.Attenuation)
  SharedDtor();
}

void Light_Attenuation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Light_Attenuation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light_Attenuation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_Attenuation_descriptor_;
}

const Light_Attenuation& Light_Attenuation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Light_Attenuation* Light_Attenuation::default_instance_ = NULL;

Light_Attenuation* Light_Attenuation::New(::google::protobuf::Arena* arena) const {
  Light_Attenuation* n = new Light_Attenuation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light_Attenuation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light_Attenuation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(constant_, exponential_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Light_Attenuation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Light.Attenuation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float constant = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &constant_)));
          set_has_constant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_linear;
        break;
      }

      // optional float linear = 2;
      case 2: {
        if (tag == 21) {
         parse_linear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linear_)));
          set_has_linear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_exponential;
        break;
      }

      // optional float exponential = 3;
      case 3: {
        if (tag == 29) {
         parse_exponential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exponential_)));
          set_has_exponential();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Light.Attenuation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Light.Attenuation)
  return false;
#undef DO_
}

void Light_Attenuation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Light.Attenuation)
  // optional float constant = 1;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->constant(), output);
  }

  // optional float linear = 2;
  if (has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->linear(), output);
  }

  // optional float exponential = 3;
  if (has_exponential()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exponential(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Light.Attenuation)
}

::google::protobuf::uint8* Light_Attenuation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Light.Attenuation)
  // optional float constant = 1;
  if (has_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->constant(), target);
  }

  // optional float linear = 2;
  if (has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->linear(), target);
  }

  // optional float exponential = 3;
  if (has_exponential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->exponential(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Light.Attenuation)
  return target;
}

int Light_Attenuation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float constant = 1;
    if (has_constant()) {
      total_size += 1 + 4;
    }

    // optional float linear = 2;
    if (has_linear()) {
      total_size += 1 + 4;
    }

    // optional float exponential = 3;
    if (has_exponential()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light_Attenuation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Light_Attenuation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Light_Attenuation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Light_Attenuation::MergeFrom(const Light_Attenuation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constant()) {
      set_constant(from.constant());
    }
    if (from.has_linear()) {
      set_linear(from.linear());
    }
    if (from.has_exponential()) {
      set_exponential(from.exponential());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Light_Attenuation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light_Attenuation::CopyFrom(const Light_Attenuation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light_Attenuation::IsInitialized() const {

  return true;
}

void Light_Attenuation::Swap(Light_Attenuation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light_Attenuation::InternalSwap(Light_Attenuation* other) {
  std::swap(constant_, other->constant_);
  std::swap(linear_, other->linear_);
  std::swap(exponential_, other->exponential_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light_Attenuation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_Attenuation_descriptor_;
  metadata.reflection = Light_Attenuation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Light_Direction::kXFieldNumber;
const int Light_Direction::kYFieldNumber;
const int Light_Direction::kZFieldNumber;
#endif  // !_MSC_VER

Light_Direction::Light_Direction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Light.Direction)
}

void Light_Direction::InitAsDefaultInstance() {
}

Light_Direction::Light_Direction(const Light_Direction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Light.Direction)
}

void Light_Direction::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Light_Direction::~Light_Direction() {
  // @@protoc_insertion_point(destructor:tec.proto.Light.Direction)
  SharedDtor();
}

void Light_Direction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Light_Direction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light_Direction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_Direction_descriptor_;
}

const Light_Direction& Light_Direction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Light_Direction* Light_Direction::default_instance_ = NULL;

Light_Direction* Light_Direction::New(::google::protobuf::Arena* arena) const {
  Light_Direction* n = new Light_Direction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light_Direction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light_Direction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Light_Direction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Light.Direction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Light.Direction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Light.Direction)
  return false;
#undef DO_
}

void Light_Direction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Light.Direction)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Light.Direction)
}

::google::protobuf::uint8* Light_Direction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Light.Direction)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Light.Direction)
  return target;
}

int Light_Direction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light_Direction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Light_Direction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Light_Direction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Light_Direction::MergeFrom(const Light_Direction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Light_Direction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light_Direction::CopyFrom(const Light_Direction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light_Direction::IsInitialized() const {

  return true;
}

void Light_Direction::Swap(Light_Direction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light_Direction::InternalSwap(Light_Direction* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light_Direction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_Direction_descriptor_;
  metadata.reflection = Light_Direction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Light::kColorXFieldNumber;
const int Light::kColorYFieldNumber;
const int Light::kColorZFieldNumber;
const int Light::kAmbientIntensityFieldNumber;
const int Light::kDiffuseIntensityFieldNumber;
const int Light::kAttenuationFieldNumber;
const int Light::kCutoffFieldNumber;
const int Light::kDirectionFieldNumber;
#endif  // !_MSC_VER

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Light)
}

void Light::InitAsDefaultInstance() {
  attenuation_ = const_cast< ::tec::proto::Light_Attenuation*>(&::tec::proto::Light_Attenuation::default_instance());
  direction_ = const_cast< ::tec::proto::Light_Direction*>(&::tec::proto::Light_Direction::default_instance());
}

Light::Light(const Light& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Light)
}

void Light::SharedCtor() {
  _cached_size_ = 0;
  color_x_ = 0;
  color_y_ = 0;
  color_z_ = 0;
  ambient_intensity_ = 0;
  diffuse_intensity_ = 0;
  attenuation_ = NULL;
  cutoff_ = 0;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:tec.proto.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  if (this != default_instance_) {
    delete attenuation_;
    delete direction_;
  }
}

void Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Light_descriptor_;
}

const Light& Light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Light* Light::default_instance_ = NULL;

Light* Light::New(::google::protobuf::Arena* arena) const {
  Light* n = new Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Light::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Light*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(color_x_, ambient_intensity_);
    ZR_(diffuse_intensity_, cutoff_);
    if (has_attenuation()) {
      if (attenuation_ != NULL) attenuation_->::tec::proto::Light_Attenuation::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::tec::proto::Light_Direction::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float color_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_x_)));
          set_has_color_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_color_y;
        break;
      }

      // optional float color_y = 2;
      case 2: {
        if (tag == 21) {
         parse_color_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_y_)));
          set_has_color_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_color_z;
        break;
      }

      // optional float color_z = 3;
      case 3: {
        if (tag == 29) {
         parse_color_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_z_)));
          set_has_color_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ambient_intensity;
        break;
      }

      // optional float ambient_intensity = 4;
      case 4: {
        if (tag == 37) {
         parse_ambient_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ambient_intensity_)));
          set_has_ambient_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_diffuse_intensity;
        break;
      }

      // optional float diffuse_intensity = 5;
      case 5: {
        if (tag == 45) {
         parse_diffuse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diffuse_intensity_)));
          set_has_diffuse_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attenuation;
        break;
      }

      // optional .tec.proto.Light.Attenuation attenuation = 6;
      case 6: {
        if (tag == 50) {
         parse_attenuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attenuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cutoff;
        break;
      }

      // optional float cutoff = 7;
      case 7: {
        if (tag == 61) {
         parse_cutoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cutoff_)));
          set_has_cutoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_direction;
        break;
      }

      // optional .tec.proto.Light.Direction direction = 8;
      case 8: {
        if (tag == 66) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Light)
  // optional float color_x = 1;
  if (has_color_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->color_x(), output);
  }

  // optional float color_y = 2;
  if (has_color_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->color_y(), output);
  }

  // optional float color_z = 3;
  if (has_color_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->color_z(), output);
  }

  // optional float ambient_intensity = 4;
  if (has_ambient_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ambient_intensity(), output);
  }

  // optional float diffuse_intensity = 5;
  if (has_diffuse_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->diffuse_intensity(), output);
  }

  // optional .tec.proto.Light.Attenuation attenuation = 6;
  if (has_attenuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->attenuation_, output);
  }

  // optional float cutoff = 7;
  if (has_cutoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cutoff(), output);
  }

  // optional .tec.proto.Light.Direction direction = 8;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Light)
}

::google::protobuf::uint8* Light::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Light)
  // optional float color_x = 1;
  if (has_color_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->color_x(), target);
  }

  // optional float color_y = 2;
  if (has_color_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->color_y(), target);
  }

  // optional float color_z = 3;
  if (has_color_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->color_z(), target);
  }

  // optional float ambient_intensity = 4;
  if (has_ambient_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ambient_intensity(), target);
  }

  // optional float diffuse_intensity = 5;
  if (has_diffuse_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->diffuse_intensity(), target);
  }

  // optional .tec.proto.Light.Attenuation attenuation = 6;
  if (has_attenuation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->attenuation_, target);
  }

  // optional float cutoff = 7;
  if (has_cutoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cutoff(), target);
  }

  // optional .tec.proto.Light.Direction direction = 8;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->direction_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Light)
  return target;
}

int Light::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float color_x = 1;
    if (has_color_x()) {
      total_size += 1 + 4;
    }

    // optional float color_y = 2;
    if (has_color_y()) {
      total_size += 1 + 4;
    }

    // optional float color_z = 3;
    if (has_color_z()) {
      total_size += 1 + 4;
    }

    // optional float ambient_intensity = 4;
    if (has_ambient_intensity()) {
      total_size += 1 + 4;
    }

    // optional float diffuse_intensity = 5;
    if (has_diffuse_intensity()) {
      total_size += 1 + 4;
    }

    // optional .tec.proto.Light.Attenuation attenuation = 6;
    if (has_attenuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attenuation_);
    }

    // optional float cutoff = 7;
    if (has_cutoff()) {
      total_size += 1 + 4;
    }

    // optional .tec.proto.Light.Direction direction = 8;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Light* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color_x()) {
      set_color_x(from.color_x());
    }
    if (from.has_color_y()) {
      set_color_y(from.color_y());
    }
    if (from.has_color_z()) {
      set_color_z(from.color_z());
    }
    if (from.has_ambient_intensity()) {
      set_ambient_intensity(from.ambient_intensity());
    }
    if (from.has_diffuse_intensity()) {
      set_diffuse_intensity(from.diffuse_intensity());
    }
    if (from.has_attenuation()) {
      mutable_attenuation()->::tec::proto::Light_Attenuation::MergeFrom(from.attenuation());
    }
    if (from.has_cutoff()) {
      set_cutoff(from.cutoff());
    }
    if (from.has_direction()) {
      mutable_direction()->::tec::proto::Light_Direction::MergeFrom(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {

  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  std::swap(color_x_, other->color_x_);
  std::swap(color_y_, other->color_y_);
  std::swap(color_z_, other->color_z_);
  std::swap(ambient_intensity_, other->ambient_intensity_);
  std::swap(diffuse_intensity_, other->diffuse_intensity_);
  std::swap(attenuation_, other->attenuation_);
  std::swap(cutoff_, other->cutoff_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Light_descriptor_;
  metadata.reflection = Light_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Light_Attenuation

// optional float constant = 1;
bool Light_Attenuation::has_constant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Light_Attenuation::set_has_constant() {
  _has_bits_[0] |= 0x00000001u;
}
void Light_Attenuation::clear_has_constant() {
  _has_bits_[0] &= ~0x00000001u;
}
void Light_Attenuation::clear_constant() {
  constant_ = 0;
  clear_has_constant();
}
 float Light_Attenuation::constant() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Attenuation.constant)
  return constant_;
}
 void Light_Attenuation::set_constant(float value) {
  set_has_constant();
  constant_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Attenuation.constant)
}

// optional float linear = 2;
bool Light_Attenuation::has_linear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Light_Attenuation::set_has_linear() {
  _has_bits_[0] |= 0x00000002u;
}
void Light_Attenuation::clear_has_linear() {
  _has_bits_[0] &= ~0x00000002u;
}
void Light_Attenuation::clear_linear() {
  linear_ = 0;
  clear_has_linear();
}
 float Light_Attenuation::linear() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Attenuation.linear)
  return linear_;
}
 void Light_Attenuation::set_linear(float value) {
  set_has_linear();
  linear_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Attenuation.linear)
}

// optional float exponential = 3;
bool Light_Attenuation::has_exponential() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Light_Attenuation::set_has_exponential() {
  _has_bits_[0] |= 0x00000004u;
}
void Light_Attenuation::clear_has_exponential() {
  _has_bits_[0] &= ~0x00000004u;
}
void Light_Attenuation::clear_exponential() {
  exponential_ = 0;
  clear_has_exponential();
}
 float Light_Attenuation::exponential() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Attenuation.exponential)
  return exponential_;
}
 void Light_Attenuation::set_exponential(float value) {
  set_has_exponential();
  exponential_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Attenuation.exponential)
}

// -------------------------------------------------------------------

// Light_Direction

// optional float x = 1;
bool Light_Direction::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Light_Direction::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Light_Direction::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Light_Direction::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Light_Direction::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Direction.x)
  return x_;
}
 void Light_Direction::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Direction.x)
}

// optional float y = 2;
bool Light_Direction::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Light_Direction::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Light_Direction::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Light_Direction::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Light_Direction::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Direction.y)
  return y_;
}
 void Light_Direction::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Direction.y)
}

// optional float z = 3;
bool Light_Direction::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Light_Direction::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Light_Direction::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Light_Direction::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Light_Direction::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.Direction.z)
  return z_;
}
 void Light_Direction::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.Direction.z)
}

// -------------------------------------------------------------------

// Light

// optional float color_x = 1;
bool Light::has_color_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Light::set_has_color_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Light::clear_has_color_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Light::clear_color_x() {
  color_x_ = 0;
  clear_has_color_x();
}
 float Light::color_x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.color_x)
  return color_x_;
}
 void Light::set_color_x(float value) {
  set_has_color_x();
  color_x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.color_x)
}

// optional float color_y = 2;
bool Light::has_color_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Light::set_has_color_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Light::clear_has_color_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Light::clear_color_y() {
  color_y_ = 0;
  clear_has_color_y();
}
 float Light::color_y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.color_y)
  return color_y_;
}
 void Light::set_color_y(float value) {
  set_has_color_y();
  color_y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.color_y)
}

// optional float color_z = 3;
bool Light::has_color_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Light::set_has_color_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Light::clear_has_color_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Light::clear_color_z() {
  color_z_ = 0;
  clear_has_color_z();
}
 float Light::color_z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.color_z)
  return color_z_;
}
 void Light::set_color_z(float value) {
  set_has_color_z();
  color_z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.color_z)
}

// optional float ambient_intensity = 4;
bool Light::has_ambient_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Light::set_has_ambient_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
void Light::clear_has_ambient_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
void Light::clear_ambient_intensity() {
  ambient_intensity_ = 0;
  clear_has_ambient_intensity();
}
 float Light::ambient_intensity() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.ambient_intensity)
  return ambient_intensity_;
}
 void Light::set_ambient_intensity(float value) {
  set_has_ambient_intensity();
  ambient_intensity_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.ambient_intensity)
}

// optional float diffuse_intensity = 5;
bool Light::has_diffuse_intensity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Light::set_has_diffuse_intensity() {
  _has_bits_[0] |= 0x00000010u;
}
void Light::clear_has_diffuse_intensity() {
  _has_bits_[0] &= ~0x00000010u;
}
void Light::clear_diffuse_intensity() {
  diffuse_intensity_ = 0;
  clear_has_diffuse_intensity();
}
 float Light::diffuse_intensity() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.diffuse_intensity)
  return diffuse_intensity_;
}
 void Light::set_diffuse_intensity(float value) {
  set_has_diffuse_intensity();
  diffuse_intensity_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.diffuse_intensity)
}

// optional .tec.proto.Light.Attenuation attenuation = 6;
bool Light::has_attenuation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Light::set_has_attenuation() {
  _has_bits_[0] |= 0x00000020u;
}
void Light::clear_has_attenuation() {
  _has_bits_[0] &= ~0x00000020u;
}
void Light::clear_attenuation() {
  if (attenuation_ != NULL) attenuation_->::tec::proto::Light_Attenuation::Clear();
  clear_has_attenuation();
}
 const ::tec::proto::Light_Attenuation& Light::attenuation() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.attenuation)
  return attenuation_ != NULL ? *attenuation_ : *default_instance_->attenuation_;
}
 ::tec::proto::Light_Attenuation* Light::mutable_attenuation() {
  set_has_attenuation();
  if (attenuation_ == NULL) {
    attenuation_ = new ::tec::proto::Light_Attenuation;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Light.attenuation)
  return attenuation_;
}
 ::tec::proto::Light_Attenuation* Light::release_attenuation() {
  clear_has_attenuation();
  ::tec::proto::Light_Attenuation* temp = attenuation_;
  attenuation_ = NULL;
  return temp;
}
 void Light::set_allocated_attenuation(::tec::proto::Light_Attenuation* attenuation) {
  delete attenuation_;
  attenuation_ = attenuation;
  if (attenuation) {
    set_has_attenuation();
  } else {
    clear_has_attenuation();
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Light.attenuation)
}

// optional float cutoff = 7;
bool Light::has_cutoff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Light::set_has_cutoff() {
  _has_bits_[0] |= 0x00000040u;
}
void Light::clear_has_cutoff() {
  _has_bits_[0] &= ~0x00000040u;
}
void Light::clear_cutoff() {
  cutoff_ = 0;
  clear_has_cutoff();
}
 float Light::cutoff() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.cutoff)
  return cutoff_;
}
 void Light::set_cutoff(float value) {
  set_has_cutoff();
  cutoff_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Light.cutoff)
}

// optional .tec.proto.Light.Direction direction = 8;
bool Light::has_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Light::set_has_direction() {
  _has_bits_[0] |= 0x00000080u;
}
void Light::clear_has_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
void Light::clear_direction() {
  if (direction_ != NULL) direction_->::tec::proto::Light_Direction::Clear();
  clear_has_direction();
}
 const ::tec::proto::Light_Direction& Light::direction() const {
  // @@protoc_insertion_point(field_get:tec.proto.Light.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
 ::tec::proto::Light_Direction* Light::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::tec::proto::Light_Direction;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Light.direction)
  return direction_;
}
 ::tec::proto::Light_Direction* Light::release_direction() {
  clear_has_direction();
  ::tec::proto::Light_Direction* temp = direction_;
  direction_ = NULL;
  return temp;
}
 void Light::set_allocated_direction(::tec::proto::Light_Direction* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Light.direction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LuaScript::kScriptNameFieldNumber;
#endif  // !_MSC_VER

LuaScript::LuaScript()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.LuaScript)
}

void LuaScript::InitAsDefaultInstance() {
}

LuaScript::LuaScript(const LuaScript& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.LuaScript)
}

void LuaScript::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  script_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuaScript::~LuaScript() {
  // @@protoc_insertion_point(destructor:tec.proto.LuaScript)
  SharedDtor();
}

void LuaScript::SharedDtor() {
  script_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LuaScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuaScript::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuaScript_descriptor_;
}

const LuaScript& LuaScript::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

LuaScript* LuaScript::default_instance_ = NULL;

LuaScript* LuaScript::New(::google::protobuf::Arena* arena) const {
  LuaScript* n = new LuaScript;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LuaScript::Clear() {
  if (has_script_name()) {
    script_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LuaScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.LuaScript)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string script_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->script_name().data(), this->script_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.LuaScript.script_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.LuaScript)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.LuaScript)
  return false;
#undef DO_
}

void LuaScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.LuaScript)
  // optional string script_name = 1;
  if (has_script_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_name().data(), this->script_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.LuaScript.script_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->script_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.LuaScript)
}

::google::protobuf::uint8* LuaScript::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.LuaScript)
  // optional string script_name = 1;
  if (has_script_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->script_name().data(), this->script_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.LuaScript.script_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->script_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.LuaScript)
  return target;
}

int LuaScript::ByteSize() const {
  int total_size = 0;

  // optional string script_name = 1;
  if (has_script_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->script_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuaScript::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LuaScript* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LuaScript>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuaScript::MergeFrom(const LuaScript& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script_name()) {
      set_has_script_name();
      script_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.script_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LuaScript::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuaScript::CopyFrom(const LuaScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuaScript::IsInitialized() const {

  return true;
}

void LuaScript::Swap(LuaScript* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LuaScript::InternalSwap(LuaScript* other) {
  script_name_.Swap(&other->script_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LuaScript::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuaScript_descriptor_;
  metadata.reflection = LuaScript_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LuaScript

// optional string script_name = 1;
bool LuaScript::has_script_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LuaScript::set_has_script_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LuaScript::clear_has_script_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LuaScript::clear_script_name() {
  script_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_script_name();
}
 const ::std::string& LuaScript::script_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.LuaScript.script_name)
  return script_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LuaScript::set_script_name(const ::std::string& value) {
  set_has_script_name();
  script_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.LuaScript.script_name)
}
 void LuaScript::set_script_name(const char* value) {
  set_has_script_name();
  script_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.LuaScript.script_name)
}
 void LuaScript::set_script_name(const char* value, size_t size) {
  set_has_script_name();
  script_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.LuaScript.script_name)
}
 ::std::string* LuaScript::mutable_script_name() {
  set_has_script_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.LuaScript.script_name)
  return script_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LuaScript::release_script_name() {
  clear_has_script_name();
  return script_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LuaScript::set_allocated_script_name(::std::string* script_name) {
  if (script_name != NULL) {
    set_has_script_name();
  } else {
    clear_has_script_name();
  }
  script_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), script_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.LuaScript.script_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VoxelVolumen::kDummyFieldNumber;
#endif  // !_MSC_VER

VoxelVolumen::VoxelVolumen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.VoxelVolumen)
}

void VoxelVolumen::InitAsDefaultInstance() {
}

VoxelVolumen::VoxelVolumen(const VoxelVolumen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.VoxelVolumen)
}

void VoxelVolumen::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoxelVolumen::~VoxelVolumen() {
  // @@protoc_insertion_point(destructor:tec.proto.VoxelVolumen)
  SharedDtor();
}

void VoxelVolumen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoxelVolumen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoxelVolumen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoxelVolumen_descriptor_;
}

const VoxelVolumen& VoxelVolumen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

VoxelVolumen* VoxelVolumen::default_instance_ = NULL;

VoxelVolumen* VoxelVolumen::New(::google::protobuf::Arena* arena) const {
  VoxelVolumen* n = new VoxelVolumen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoxelVolumen::Clear() {
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VoxelVolumen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.VoxelVolumen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dummy = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.VoxelVolumen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.VoxelVolumen)
  return false;
#undef DO_
}

void VoxelVolumen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.VoxelVolumen)
  // optional float dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dummy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.VoxelVolumen)
}

::google::protobuf::uint8* VoxelVolumen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.VoxelVolumen)
  // optional float dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dummy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.VoxelVolumen)
  return target;
}

int VoxelVolumen::ByteSize() const {
  int total_size = 0;

  // optional float dummy = 1;
  if (has_dummy()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoxelVolumen::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoxelVolumen* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoxelVolumen>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoxelVolumen::MergeFrom(const VoxelVolumen& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VoxelVolumen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoxelVolumen::CopyFrom(const VoxelVolumen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoxelVolumen::IsInitialized() const {

  return true;
}

void VoxelVolumen::Swap(VoxelVolumen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoxelVolumen::InternalSwap(VoxelVolumen* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoxelVolumen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoxelVolumen_descriptor_;
  metadata.reflection = VoxelVolumen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoxelVolumen

// optional float dummy = 1;
bool VoxelVolumen::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoxelVolumen::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
void VoxelVolumen::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoxelVolumen::clear_dummy() {
  dummy_ = 0;
  clear_has_dummy();
}
 float VoxelVolumen::dummy() const {
  // @@protoc_insertion_point(field_get:tec.proto.VoxelVolumen.dummy)
  return dummy_;
}
 void VoxelVolumen::set_dummy(float value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.VoxelVolumen.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ComputerScreen::kTextBufferFieldNumber;
const int ComputerScreen::kFontBufferFieldNumber;
const int ComputerScreen::kBufferPtrFieldNumber;
const int ComputerScreen::kFontPtrFieldNumber;
const int ComputerScreen::kVsyncMsgFieldNumber;
const int ComputerScreen::kAFieldNumber;
const int ComputerScreen::kBFieldNumber;
const int ComputerScreen::kDFieldNumber;
const int ComputerScreen::kEFieldNumber;
#endif  // !_MSC_VER

ComputerScreen::ComputerScreen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.ComputerScreen)
}

void ComputerScreen::InitAsDefaultInstance() {
}

ComputerScreen::ComputerScreen(const ComputerScreen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.ComputerScreen)
}

void ComputerScreen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_ptr_ = 0u;
  font_ptr_ = 0u;
  vsync_msg_ = 0u;
  a_ = 0u;
  b_ = 0u;
  d_ = 0u;
  e_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComputerScreen::~ComputerScreen() {
  // @@protoc_insertion_point(destructor:tec.proto.ComputerScreen)
  SharedDtor();
}

void ComputerScreen::SharedDtor() {
  text_buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ComputerScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputerScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputerScreen_descriptor_;
}

const ComputerScreen& ComputerScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

ComputerScreen* ComputerScreen::default_instance_ = NULL;

ComputerScreen* ComputerScreen::New(::google::protobuf::Arena* arena) const {
  ComputerScreen* n = new ComputerScreen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputerScreen::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ComputerScreen*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(buffer_ptr_, d_);
    if (has_text_buffer()) {
      text_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_font_buffer()) {
      font_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  e_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ComputerScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.ComputerScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes text_buffer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_font_buffer;
        break;
      }

      // required bytes font_buffer = 2;
      case 2: {
        if (tag == 18) {
         parse_font_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_font_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buffer_ptr;
        break;
      }

      // required uint32 buffer_ptr = 3;
      case 3: {
        if (tag == 24) {
         parse_buffer_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffer_ptr_)));
          set_has_buffer_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_font_ptr;
        break;
      }

      // required uint32 font_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_font_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &font_ptr_)));
          set_has_font_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vsync_msg;
        break;
      }

      // required uint32 vsync_msg = 5;
      case 5: {
        if (tag == 40) {
         parse_vsync_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vsync_msg_)));
          set_has_vsync_msg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_a;
        break;
      }

      // required uint32 a = 6;
      case 6: {
        if (tag == 48) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_b;
        break;
      }

      // required uint32 b = 7;
      case 7: {
        if (tag == 56) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_d;
        break;
      }

      // required uint32 d = 8;
      case 8: {
        if (tag == 64) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_e;
        break;
      }

      // required uint32 e = 9;
      case 9: {
        if (tag == 72) {
         parse_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.ComputerScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.ComputerScreen)
  return false;
#undef DO_
}

void ComputerScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.ComputerScreen)
  // required bytes text_buffer = 1;
  if (has_text_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->text_buffer(), output);
  }

  // required bytes font_buffer = 2;
  if (has_font_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->font_buffer(), output);
  }

  // required uint32 buffer_ptr = 3;
  if (has_buffer_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buffer_ptr(), output);
  }

  // required uint32 font_ptr = 4;
  if (has_font_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->font_ptr(), output);
  }

  // required uint32 vsync_msg = 5;
  if (has_vsync_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vsync_msg(), output);
  }

  // required uint32 a = 6;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->a(), output);
  }

  // required uint32 b = 7;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->b(), output);
  }

  // required uint32 d = 8;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->d(), output);
  }

  // required uint32 e = 9;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->e(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.ComputerScreen)
}

::google::protobuf::uint8* ComputerScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.ComputerScreen)
  // required bytes text_buffer = 1;
  if (has_text_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text_buffer(), target);
  }

  // required bytes font_buffer = 2;
  if (has_font_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->font_buffer(), target);
  }

  // required uint32 buffer_ptr = 3;
  if (has_buffer_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buffer_ptr(), target);
  }

  // required uint32 font_ptr = 4;
  if (has_font_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->font_ptr(), target);
  }

  // required uint32 vsync_msg = 5;
  if (has_vsync_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vsync_msg(), target);
  }

  // required uint32 a = 6;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->a(), target);
  }

  // required uint32 b = 7;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->b(), target);
  }

  // required uint32 d = 8;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->d(), target);
  }

  // required uint32 e = 9;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->e(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.ComputerScreen)
  return target;
}

int ComputerScreen::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_text_buffer()) {
    // required bytes text_buffer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text_buffer());
  }

  if (has_font_buffer()) {
    // required bytes font_buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->font_buffer());
  }

  if (has_buffer_ptr()) {
    // required uint32 buffer_ptr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buffer_ptr());
  }

  if (has_font_ptr()) {
    // required uint32 font_ptr = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->font_ptr());
  }

  if (has_vsync_msg()) {
    // required uint32 vsync_msg = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vsync_msg());
  }

  if (has_a()) {
    // required uint32 a = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());
  }

  if (has_b()) {
    // required uint32 b = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  if (has_d()) {
    // required uint32 d = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->d());
  }

  if (has_e()) {
    // required uint32 e = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->e());
  }

  return total_size;
}
int ComputerScreen::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes text_buffer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text_buffer());

    // required bytes font_buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->font_buffer());

    // required uint32 buffer_ptr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buffer_ptr());

    // required uint32 font_ptr = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->font_ptr());

    // required uint32 vsync_msg = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vsync_msg());

    // required uint32 a = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());

    // required uint32 b = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());

    // required uint32 d = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->d());

    // required uint32 e = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->e());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputerScreen::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ComputerScreen* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputerScreen>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComputerScreen::MergeFrom(const ComputerScreen& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text_buffer()) {
      set_has_text_buffer();
      text_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_buffer_);
    }
    if (from.has_font_buffer()) {
      set_has_font_buffer();
      font_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_buffer_);
    }
    if (from.has_buffer_ptr()) {
      set_buffer_ptr(from.buffer_ptr());
    }
    if (from.has_font_ptr()) {
      set_font_ptr(from.font_ptr());
    }
    if (from.has_vsync_msg()) {
      set_vsync_msg(from.vsync_msg());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_e()) {
      set_e(from.e());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ComputerScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputerScreen::CopyFrom(const ComputerScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerScreen::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void ComputerScreen::Swap(ComputerScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputerScreen::InternalSwap(ComputerScreen* other) {
  text_buffer_.Swap(&other->text_buffer_);
  font_buffer_.Swap(&other->font_buffer_);
  std::swap(buffer_ptr_, other->buffer_ptr_);
  std::swap(font_ptr_, other->font_ptr_);
  std::swap(vsync_msg_, other->vsync_msg_);
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(d_, other->d_);
  std::swap(e_, other->e_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputerScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputerScreen_descriptor_;
  metadata.reflection = ComputerScreen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputerScreen

// required bytes text_buffer = 1;
bool ComputerScreen::has_text_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComputerScreen::set_has_text_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void ComputerScreen::clear_has_text_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComputerScreen::clear_text_buffer() {
  text_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_buffer();
}
 const ::std::string& ComputerScreen::text_buffer() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.text_buffer)
  return text_buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerScreen::set_text_buffer(const ::std::string& value) {
  set_has_text_buffer();
  text_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.text_buffer)
}
 void ComputerScreen::set_text_buffer(const char* value) {
  set_has_text_buffer();
  text_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.ComputerScreen.text_buffer)
}
 void ComputerScreen::set_text_buffer(const void* value, size_t size) {
  set_has_text_buffer();
  text_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.ComputerScreen.text_buffer)
}
 ::std::string* ComputerScreen::mutable_text_buffer() {
  set_has_text_buffer();
  // @@protoc_insertion_point(field_mutable:tec.proto.ComputerScreen.text_buffer)
  return text_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerScreen::release_text_buffer() {
  clear_has_text_buffer();
  return text_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerScreen::set_allocated_text_buffer(::std::string* text_buffer) {
  if (text_buffer != NULL) {
    set_has_text_buffer();
  } else {
    clear_has_text_buffer();
  }
  text_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_buffer);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.ComputerScreen.text_buffer)
}

// required bytes font_buffer = 2;
bool ComputerScreen::has_font_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ComputerScreen::set_has_font_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void ComputerScreen::clear_has_font_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void ComputerScreen::clear_font_buffer() {
  font_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_font_buffer();
}
 const ::std::string& ComputerScreen::font_buffer() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.font_buffer)
  return font_buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerScreen::set_font_buffer(const ::std::string& value) {
  set_has_font_buffer();
  font_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.font_buffer)
}
 void ComputerScreen::set_font_buffer(const char* value) {
  set_has_font_buffer();
  font_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.ComputerScreen.font_buffer)
}
 void ComputerScreen::set_font_buffer(const void* value, size_t size) {
  set_has_font_buffer();
  font_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.ComputerScreen.font_buffer)
}
 ::std::string* ComputerScreen::mutable_font_buffer() {
  set_has_font_buffer();
  // @@protoc_insertion_point(field_mutable:tec.proto.ComputerScreen.font_buffer)
  return font_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerScreen::release_font_buffer() {
  clear_has_font_buffer();
  return font_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerScreen::set_allocated_font_buffer(::std::string* font_buffer) {
  if (font_buffer != NULL) {
    set_has_font_buffer();
  } else {
    clear_has_font_buffer();
  }
  font_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_buffer);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.ComputerScreen.font_buffer)
}

// required uint32 buffer_ptr = 3;
bool ComputerScreen::has_buffer_ptr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ComputerScreen::set_has_buffer_ptr() {
  _has_bits_[0] |= 0x00000004u;
}
void ComputerScreen::clear_has_buffer_ptr() {
  _has_bits_[0] &= ~0x00000004u;
}
void ComputerScreen::clear_buffer_ptr() {
  buffer_ptr_ = 0u;
  clear_has_buffer_ptr();
}
 ::google::protobuf::uint32 ComputerScreen::buffer_ptr() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.buffer_ptr)
  return buffer_ptr_;
}
 void ComputerScreen::set_buffer_ptr(::google::protobuf::uint32 value) {
  set_has_buffer_ptr();
  buffer_ptr_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.buffer_ptr)
}

// required uint32 font_ptr = 4;
bool ComputerScreen::has_font_ptr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ComputerScreen::set_has_font_ptr() {
  _has_bits_[0] |= 0x00000008u;
}
void ComputerScreen::clear_has_font_ptr() {
  _has_bits_[0] &= ~0x00000008u;
}
void ComputerScreen::clear_font_ptr() {
  font_ptr_ = 0u;
  clear_has_font_ptr();
}
 ::google::protobuf::uint32 ComputerScreen::font_ptr() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.font_ptr)
  return font_ptr_;
}
 void ComputerScreen::set_font_ptr(::google::protobuf::uint32 value) {
  set_has_font_ptr();
  font_ptr_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.font_ptr)
}

// required uint32 vsync_msg = 5;
bool ComputerScreen::has_vsync_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ComputerScreen::set_has_vsync_msg() {
  _has_bits_[0] |= 0x00000010u;
}
void ComputerScreen::clear_has_vsync_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
void ComputerScreen::clear_vsync_msg() {
  vsync_msg_ = 0u;
  clear_has_vsync_msg();
}
 ::google::protobuf::uint32 ComputerScreen::vsync_msg() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.vsync_msg)
  return vsync_msg_;
}
 void ComputerScreen::set_vsync_msg(::google::protobuf::uint32 value) {
  set_has_vsync_msg();
  vsync_msg_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.vsync_msg)
}

// required uint32 a = 6;
bool ComputerScreen::has_a() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ComputerScreen::set_has_a() {
  _has_bits_[0] |= 0x00000020u;
}
void ComputerScreen::clear_has_a() {
  _has_bits_[0] &= ~0x00000020u;
}
void ComputerScreen::clear_a() {
  a_ = 0u;
  clear_has_a();
}
 ::google::protobuf::uint32 ComputerScreen::a() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.a)
  return a_;
}
 void ComputerScreen::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.a)
}

// required uint32 b = 7;
bool ComputerScreen::has_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ComputerScreen::set_has_b() {
  _has_bits_[0] |= 0x00000040u;
}
void ComputerScreen::clear_has_b() {
  _has_bits_[0] &= ~0x00000040u;
}
void ComputerScreen::clear_b() {
  b_ = 0u;
  clear_has_b();
}
 ::google::protobuf::uint32 ComputerScreen::b() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.b)
  return b_;
}
 void ComputerScreen::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.b)
}

// required uint32 d = 8;
bool ComputerScreen::has_d() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ComputerScreen::set_has_d() {
  _has_bits_[0] |= 0x00000080u;
}
void ComputerScreen::clear_has_d() {
  _has_bits_[0] &= ~0x00000080u;
}
void ComputerScreen::clear_d() {
  d_ = 0u;
  clear_has_d();
}
 ::google::protobuf::uint32 ComputerScreen::d() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.d)
  return d_;
}
 void ComputerScreen::set_d(::google::protobuf::uint32 value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.d)
}

// required uint32 e = 9;
bool ComputerScreen::has_e() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ComputerScreen::set_has_e() {
  _has_bits_[0] |= 0x00000100u;
}
void ComputerScreen::clear_has_e() {
  _has_bits_[0] &= ~0x00000100u;
}
void ComputerScreen::clear_e() {
  e_ = 0u;
  clear_has_e();
}
 ::google::protobuf::uint32 ComputerScreen::e() const {
  // @@protoc_insertion_point(field_get:tec.proto.ComputerScreen.e)
  return e_;
}
 void ComputerScreen::set_e(::google::protobuf::uint32 value) {
  set_has_e();
  e_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.ComputerScreen.e)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Computer_Device::kSlotFieldNumber;
const int Computer_Device::kComputerScreenFieldNumber;
#endif  // !_MSC_VER

Computer_Device::Computer_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Computer.Device)
}

void Computer_Device::InitAsDefaultInstance() {
  Computer_Device_default_oneof_instance_->computerscreen_ = const_cast< ::tec::proto::ComputerScreen*>(&::tec::proto::ComputerScreen::default_instance());
}

Computer_Device::Computer_Device(const Computer_Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Computer.Device)
}

void Computer_Device::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_device();
}

Computer_Device::~Computer_Device() {
  // @@protoc_insertion_point(destructor:tec.proto.Computer.Device)
  SharedDtor();
}

void Computer_Device::SharedDtor() {
  if (has_device()) {
    clear_device();
  }
  if (this != default_instance_) {
  }
}

void Computer_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Computer_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Computer_Device_descriptor_;
}

const Computer_Device& Computer_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Computer_Device* Computer_Device::default_instance_ = NULL;

Computer_Device* Computer_Device::New(::google::protobuf::Arena* arena) const {
  Computer_Device* n = new Computer_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Computer_Device::clear_device() {
  switch(device_case()) {
    case kComputerScreen: {
      delete device_.computerscreen_;
      break;
    }
    case DEVICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICE_NOT_SET;
}


void Computer_Device::Clear() {
  slot_ = 0u;
  clear_device();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Computer_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Computer.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_computerScreen;
        break;
      }

      // optional .tec.proto.ComputerScreen computerScreen = 2;
      case 2: {
        if (tag == 18) {
         parse_computerScreen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computerscreen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Computer.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Computer.Device)
  return false;
#undef DO_
}

void Computer_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Computer.Device)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional .tec.proto.ComputerScreen computerScreen = 2;
  if (has_computerscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *device_.computerscreen_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Computer.Device)
}

::google::protobuf::uint8* Computer_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Computer.Device)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional .tec.proto.ComputerScreen computerScreen = 2;
  if (has_computerscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *device_.computerscreen_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Computer.Device)
  return target;
}

int Computer_Device::ByteSize() const {
  int total_size = 0;

  // required uint32 slot = 1;
  if (has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }
  switch (device_case()) {
    // optional .tec.proto.ComputerScreen computerScreen = 2;
    case kComputerScreen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *device_.computerscreen_);
      break;
    }
    case DEVICE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Computer_Device::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Computer_Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Computer_Device>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Computer_Device::MergeFrom(const Computer_Device& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.device_case()) {
    case kComputerScreen: {
      mutable_computerscreen()->::tec::proto::ComputerScreen::MergeFrom(from.computerscreen());
      break;
    }
    case DEVICE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Computer_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Computer_Device::CopyFrom(const Computer_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer_Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_computerscreen()) {
    if (!this->computerscreen().IsInitialized()) return false;
  }
  return true;
}

void Computer_Device::Swap(Computer_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Computer_Device::InternalSwap(Computer_Device* other) {
  std::swap(slot_, other->slot_);
  std::swap(device_, other->device_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Computer_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Computer_Device_descriptor_;
  metadata.reflection = Computer_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Computer_CPU_TR3200::kRegistersFieldNumber;
const int Computer_CPU_TR3200::kPcFieldNumber;
const int Computer_CPU_TR3200::kWaitCyclesFieldNumber;
const int Computer_CPU_TR3200::kIntMsgFieldNumber;
const int Computer_CPU_TR3200::kInterruptFieldNumber;
const int Computer_CPU_TR3200::kStepModeFieldNumber;
const int Computer_CPU_TR3200::kSkipingFieldNumber;
const int Computer_CPU_TR3200::kSleepingFieldNumber;
#endif  // !_MSC_VER

Computer_CPU_TR3200::Computer_CPU_TR3200()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Computer.CPU.TR3200)
}

void Computer_CPU_TR3200::InitAsDefaultInstance() {
}

Computer_CPU_TR3200::Computer_CPU_TR3200(const Computer_CPU_TR3200& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Computer.CPU.TR3200)
}

void Computer_CPU_TR3200::SharedCtor() {
  _cached_size_ = 0;
  pc_ = 0u;
  wait_cycles_ = 0u;
  int_msg_ = 0u;
  interrupt_ = false;
  step_mode_ = false;
  skiping_ = false;
  sleeping_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Computer_CPU_TR3200::~Computer_CPU_TR3200() {
  // @@protoc_insertion_point(destructor:tec.proto.Computer.CPU.TR3200)
  SharedDtor();
}

void Computer_CPU_TR3200::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Computer_CPU_TR3200::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Computer_CPU_TR3200::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Computer_CPU_TR3200_descriptor_;
}

const Computer_CPU_TR3200& Computer_CPU_TR3200::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Computer_CPU_TR3200* Computer_CPU_TR3200::default_instance_ = NULL;

Computer_CPU_TR3200* Computer_CPU_TR3200::New(::google::protobuf::Arena* arena) const {
  Computer_CPU_TR3200* n = new Computer_CPU_TR3200;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Computer_CPU_TR3200::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Computer_CPU_TR3200*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 254u) {
    ZR_(pc_, sleeping_);
  }

#undef ZR_HELPER_
#undef ZR_

  registers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Computer_CPU_TR3200::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Computer.CPU.TR3200)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 registers = 1;
      case 1: {
        if (tag == 8) {
         parse_registers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_registers())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_registers())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_registers;
        if (input->ExpectTag(16)) goto parse_pc;
        break;
      }

      // required uint32 pc = 2;
      case 2: {
        if (tag == 16) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wait_cycles;
        break;
      }

      // required uint32 wait_cycles = 3;
      case 3: {
        if (tag == 24) {
         parse_wait_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_cycles_)));
          set_has_wait_cycles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int_msg;
        break;
      }

      // required uint32 int_msg = 4;
      case 4: {
        if (tag == 32) {
         parse_int_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_msg_)));
          set_has_int_msg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_interrupt;
        break;
      }

      // required bool interrupt = 5;
      case 5: {
        if (tag == 40) {
         parse_interrupt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interrupt_)));
          set_has_interrupt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step_mode;
        break;
      }

      // required bool step_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_step_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step_mode_)));
          set_has_step_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skiping;
        break;
      }

      // required bool skiping = 7;
      case 7: {
        if (tag == 56) {
         parse_skiping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skiping_)));
          set_has_skiping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sleeping;
        break;
      }

      // required bool sleeping = 8;
      case 8: {
        if (tag == 64) {
         parse_sleeping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sleeping_)));
          set_has_sleeping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Computer.CPU.TR3200)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Computer.CPU.TR3200)
  return false;
#undef DO_
}

void Computer_CPU_TR3200::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Computer.CPU.TR3200)
  // repeated uint32 registers = 1;
  for (int i = 0; i < this->registers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->registers(i), output);
  }

  // required uint32 pc = 2;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pc(), output);
  }

  // required uint32 wait_cycles = 3;
  if (has_wait_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wait_cycles(), output);
  }

  // required uint32 int_msg = 4;
  if (has_int_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->int_msg(), output);
  }

  // required bool interrupt = 5;
  if (has_interrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->interrupt(), output);
  }

  // required bool step_mode = 6;
  if (has_step_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->step_mode(), output);
  }

  // required bool skiping = 7;
  if (has_skiping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->skiping(), output);
  }

  // required bool sleeping = 8;
  if (has_sleeping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sleeping(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Computer.CPU.TR3200)
}

::google::protobuf::uint8* Computer_CPU_TR3200::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Computer.CPU.TR3200)
  // repeated uint32 registers = 1;
  for (int i = 0; i < this->registers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->registers(i), target);
  }

  // required uint32 pc = 2;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pc(), target);
  }

  // required uint32 wait_cycles = 3;
  if (has_wait_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wait_cycles(), target);
  }

  // required uint32 int_msg = 4;
  if (has_int_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->int_msg(), target);
  }

  // required bool interrupt = 5;
  if (has_interrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->interrupt(), target);
  }

  // required bool step_mode = 6;
  if (has_step_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->step_mode(), target);
  }

  // required bool skiping = 7;
  if (has_skiping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->skiping(), target);
  }

  // required bool sleeping = 8;
  if (has_sleeping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->sleeping(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Computer.CPU.TR3200)
  return target;
}

int Computer_CPU_TR3200::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_pc()) {
    // required uint32 pc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pc());
  }

  if (has_wait_cycles()) {
    // required uint32 wait_cycles = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_cycles());
  }

  if (has_int_msg()) {
    // required uint32 int_msg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->int_msg());
  }

  if (has_interrupt()) {
    // required bool interrupt = 5;
    total_size += 1 + 1;
  }

  if (has_step_mode()) {
    // required bool step_mode = 6;
    total_size += 1 + 1;
  }

  if (has_skiping()) {
    // required bool skiping = 7;
    total_size += 1 + 1;
  }

  if (has_sleeping()) {
    // required bool sleeping = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
int Computer_CPU_TR3200::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required uint32 pc = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pc());

    // required uint32 wait_cycles = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_cycles());

    // required uint32 int_msg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->int_msg());

    // required bool interrupt = 5;
    total_size += 1 + 1;

    // required bool step_mode = 6;
    total_size += 1 + 1;

    // required bool skiping = 7;
    total_size += 1 + 1;

    // required bool sleeping = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 registers = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->registers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->registers(i));
    }
    total_size += 1 * this->registers_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Computer_CPU_TR3200::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Computer_CPU_TR3200* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Computer_CPU_TR3200>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Computer_CPU_TR3200::MergeFrom(const Computer_CPU_TR3200& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  registers_.MergeFrom(from.registers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_wait_cycles()) {
      set_wait_cycles(from.wait_cycles());
    }
    if (from.has_int_msg()) {
      set_int_msg(from.int_msg());
    }
    if (from.has_interrupt()) {
      set_interrupt(from.interrupt());
    }
    if (from.has_step_mode()) {
      set_step_mode(from.step_mode());
    }
    if (from.has_skiping()) {
      set_skiping(from.skiping());
    }
    if (from.has_sleeping()) {
      set_sleeping(from.sleeping());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Computer_CPU_TR3200::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Computer_CPU_TR3200::CopyFrom(const Computer_CPU_TR3200& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer_CPU_TR3200::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fe) != 0x000000fe) return false;

  return true;
}

void Computer_CPU_TR3200::Swap(Computer_CPU_TR3200* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Computer_CPU_TR3200::InternalSwap(Computer_CPU_TR3200* other) {
  registers_.UnsafeArenaSwap(&other->registers_);
  std::swap(pc_, other->pc_);
  std::swap(wait_cycles_, other->wait_cycles_);
  std::swap(int_msg_, other->int_msg_);
  std::swap(interrupt_, other->interrupt_);
  std::swap(step_mode_, other->step_mode_);
  std::swap(skiping_, other->skiping_);
  std::swap(sleeping_, other->sleeping_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Computer_CPU_TR3200::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Computer_CPU_TR3200_descriptor_;
  metadata.reflection = Computer_CPU_TR3200_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Computer_CPU::kTr3200FieldNumber;
#endif  // !_MSC_VER

Computer_CPU::Computer_CPU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Computer.CPU)
}

void Computer_CPU::InitAsDefaultInstance() {
  Computer_CPU_default_oneof_instance_->tr3200_ = const_cast< ::tec::proto::Computer_CPU_TR3200*>(&::tec::proto::Computer_CPU_TR3200::default_instance());
}

Computer_CPU::Computer_CPU(const Computer_CPU& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Computer.CPU)
}

void Computer_CPU::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_cpu();
}

Computer_CPU::~Computer_CPU() {
  // @@protoc_insertion_point(destructor:tec.proto.Computer.CPU)
  SharedDtor();
}

void Computer_CPU::SharedDtor() {
  if (has_cpu()) {
    clear_cpu();
  }
  if (this != default_instance_) {
  }
}

void Computer_CPU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Computer_CPU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Computer_CPU_descriptor_;
}

const Computer_CPU& Computer_CPU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Computer_CPU* Computer_CPU::default_instance_ = NULL;

Computer_CPU* Computer_CPU::New(::google::protobuf::Arena* arena) const {
  Computer_CPU* n = new Computer_CPU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Computer_CPU::clear_cpu() {
  switch(cpu_case()) {
    case kTr3200: {
      delete cpu_.tr3200_;
      break;
    }
    case CPU_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CPU_NOT_SET;
}


void Computer_CPU::Clear() {
  clear_cpu();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Computer_CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Computer.CPU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tec.proto.Computer.CPU.TR3200 tr3200 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tr3200()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Computer.CPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Computer.CPU)
  return false;
#undef DO_
}

void Computer_CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Computer.CPU)
  // optional .tec.proto.Computer.CPU.TR3200 tr3200 = 1;
  if (has_tr3200()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *cpu_.tr3200_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Computer.CPU)
}

::google::protobuf::uint8* Computer_CPU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Computer.CPU)
  // optional .tec.proto.Computer.CPU.TR3200 tr3200 = 1;
  if (has_tr3200()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *cpu_.tr3200_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Computer.CPU)
  return target;
}

int Computer_CPU::ByteSize() const {
  int total_size = 0;

  switch (cpu_case()) {
    // optional .tec.proto.Computer.CPU.TR3200 tr3200 = 1;
    case kTr3200: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cpu_.tr3200_);
      break;
    }
    case CPU_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Computer_CPU::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Computer_CPU* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Computer_CPU>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Computer_CPU::MergeFrom(const Computer_CPU& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.cpu_case()) {
    case kTr3200: {
      mutable_tr3200()->::tec::proto::Computer_CPU_TR3200::MergeFrom(from.tr3200());
      break;
    }
    case CPU_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Computer_CPU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Computer_CPU::CopyFrom(const Computer_CPU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer_CPU::IsInitialized() const {

  if (has_tr3200()) {
    if (!this->tr3200().IsInitialized()) return false;
  }
  return true;
}

void Computer_CPU::Swap(Computer_CPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Computer_CPU::InternalSwap(Computer_CPU* other) {
  std::swap(cpu_, other->cpu_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Computer_CPU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Computer_CPU_descriptor_;
  metadata.reflection = Computer_CPU_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Computer::kDevicesFieldNumber;
const int Computer::kRamFieldNumber;
const int Computer::kCpuFieldNumber;
const int Computer::kRomFileFieldNumber;
#endif  // !_MSC_VER

Computer::Computer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Computer)
}

void Computer::InitAsDefaultInstance() {
  cpu_ = const_cast< ::tec::proto::Computer_CPU*>(&::tec::proto::Computer_CPU::default_instance());
}

Computer::Computer(const Computer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Computer)
}

void Computer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ram_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_ = NULL;
  rom_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Computer::~Computer() {
  // @@protoc_insertion_point(destructor:tec.proto.Computer)
  SharedDtor();
}

void Computer::SharedDtor() {
  ram_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rom_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cpu_;
  }
}

void Computer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Computer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Computer_descriptor_;
}

const Computer& Computer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Computer* Computer::default_instance_ = NULL;

Computer* Computer::New(::google::protobuf::Arena* arena) const {
  Computer* n = new Computer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Computer::Clear() {
  if (_has_bits_[0 / 32] & 14u) {
    if (has_ram()) {
      ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cpu()) {
      if (cpu_ != NULL) cpu_->::tec::proto::Computer_CPU::Clear();
    }
    if (has_rom_file()) {
      rom_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Computer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Computer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tec.proto.Computer.Device devices = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_ram;
        break;
      }

      // required bytes ram = 2;
      case 2: {
        if (tag == 18) {
         parse_ram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpu;
        break;
      }

      // required .tec.proto.Computer.CPU cpu = 3;
      case 3: {
        if (tag == 26) {
         parse_cpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rom_file;
        break;
      }

      // optional string rom_file = 4;
      case 4: {
        if (tag == 34) {
         parse_rom_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rom_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rom_file().data(), this->rom_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Computer.rom_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Computer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Computer)
  return false;
#undef DO_
}

void Computer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Computer)
  // repeated .tec.proto.Computer.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(i), output);
  }

  // required bytes ram = 2;
  if (has_ram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ram(), output);
  }

  // required .tec.proto.Computer.CPU cpu = 3;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cpu_, output);
  }

  // optional string rom_file = 4;
  if (has_rom_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rom_file().data(), this->rom_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Computer.rom_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rom_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Computer)
}

::google::protobuf::uint8* Computer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Computer)
  // repeated .tec.proto.Computer.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->devices(i), target);
  }

  // required bytes ram = 2;
  if (has_ram()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ram(), target);
  }

  // required .tec.proto.Computer.CPU cpu = 3;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cpu_, target);
  }

  // optional string rom_file = 4;
  if (has_rom_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rom_file().data(), this->rom_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Computer.rom_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rom_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Computer)
  return target;
}

int Computer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ram()) {
    // required bytes ram = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ram());
  }

  if (has_cpu()) {
    // required .tec.proto.Computer.CPU cpu = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cpu_);
  }

  return total_size;
}
int Computer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bytes ram = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ram());

    // required .tec.proto.Computer.CPU cpu = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cpu_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string rom_file = 4;
  if (has_rom_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rom_file());
  }

  // repeated .tec.proto.Computer.Device devices = 1;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Computer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Computer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Computer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Computer::MergeFrom(const Computer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  devices_.MergeFrom(from.devices_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ram()) {
      set_has_ram();
      ram_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ram_);
    }
    if (from.has_cpu()) {
      mutable_cpu()->::tec::proto::Computer_CPU::MergeFrom(from.cpu());
    }
    if (from.has_rom_file()) {
      set_has_rom_file();
      rom_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rom_file_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Computer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Computer::CopyFrom(const Computer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  if (has_cpu()) {
    if (!this->cpu_->IsInitialized()) return false;
  }
  return true;
}

void Computer::Swap(Computer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Computer::InternalSwap(Computer* other) {
  devices_.UnsafeArenaSwap(&other->devices_);
  ram_.Swap(&other->ram_);
  std::swap(cpu_, other->cpu_);
  rom_file_.Swap(&other->rom_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Computer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Computer_descriptor_;
  metadata.reflection = Computer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Computer_Device

// required uint32 slot = 1;
bool Computer_Device::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Computer_Device::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
void Computer_Device::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
void Computer_Device::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
 ::google::protobuf::uint32 Computer_Device::slot() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.Device.slot)
  return slot_;
}
 void Computer_Device::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.Device.slot)
}

// optional .tec.proto.ComputerScreen computerScreen = 2;
bool Computer_Device::has_computerscreen() const {
  return device_case() == kComputerScreen;
}
void Computer_Device::set_has_computerscreen() {
  _oneof_case_[0] = kComputerScreen;
}
void Computer_Device::clear_computerscreen() {
  if (has_computerscreen()) {
    delete device_.computerscreen_;
    clear_has_device();
  }
}
 const ::tec::proto::ComputerScreen& Computer_Device::computerscreen() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.Device.computerScreen)
  return has_computerscreen() ? *device_.computerscreen_
                      : ::tec::proto::ComputerScreen::default_instance();
}
 ::tec::proto::ComputerScreen* Computer_Device::mutable_computerscreen() {
  if (!has_computerscreen()) {
    clear_device();
    set_has_computerscreen();
    device_.computerscreen_ = new ::tec::proto::ComputerScreen;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.Device.computerScreen)
  return device_.computerscreen_;
}
 ::tec::proto::ComputerScreen* Computer_Device::release_computerscreen() {
  if (has_computerscreen()) {
    clear_has_device();
    ::tec::proto::ComputerScreen* temp = device_.computerscreen_;
    device_.computerscreen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Computer_Device::set_allocated_computerscreen(::tec::proto::ComputerScreen* computerscreen) {
  clear_device();
  if (computerscreen) {
    set_has_computerscreen();
    device_.computerscreen_ = computerscreen;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Computer.Device.computerScreen)
}

bool Computer_Device::has_device() const {
  return device_case() != DEVICE_NOT_SET;
}
void Computer_Device::clear_has_device() {
  _oneof_case_[0] = DEVICE_NOT_SET;
}
Computer_Device::DeviceCase Computer_Device::device_case() const {
  return Computer_Device::DeviceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Computer_CPU_TR3200

// repeated uint32 registers = 1;
int Computer_CPU_TR3200::registers_size() const {
  return registers_.size();
}
void Computer_CPU_TR3200::clear_registers() {
  registers_.Clear();
}
 ::google::protobuf::uint32 Computer_CPU_TR3200::registers(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.registers)
  return registers_.Get(index);
}
 void Computer_CPU_TR3200::set_registers(int index, ::google::protobuf::uint32 value) {
  registers_.Set(index, value);
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.registers)
}
 void Computer_CPU_TR3200::add_registers(::google::protobuf::uint32 value) {
  registers_.Add(value);
  // @@protoc_insertion_point(field_add:tec.proto.Computer.CPU.TR3200.registers)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Computer_CPU_TR3200::registers() const {
  // @@protoc_insertion_point(field_list:tec.proto.Computer.CPU.TR3200.registers)
  return registers_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Computer_CPU_TR3200::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.Computer.CPU.TR3200.registers)
  return &registers_;
}

// required uint32 pc = 2;
bool Computer_CPU_TR3200::has_pc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Computer_CPU_TR3200::set_has_pc() {
  _has_bits_[0] |= 0x00000002u;
}
void Computer_CPU_TR3200::clear_has_pc() {
  _has_bits_[0] &= ~0x00000002u;
}
void Computer_CPU_TR3200::clear_pc() {
  pc_ = 0u;
  clear_has_pc();
}
 ::google::protobuf::uint32 Computer_CPU_TR3200::pc() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.pc)
  return pc_;
}
 void Computer_CPU_TR3200::set_pc(::google::protobuf::uint32 value) {
  set_has_pc();
  pc_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.pc)
}

// required uint32 wait_cycles = 3;
bool Computer_CPU_TR3200::has_wait_cycles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Computer_CPU_TR3200::set_has_wait_cycles() {
  _has_bits_[0] |= 0x00000004u;
}
void Computer_CPU_TR3200::clear_has_wait_cycles() {
  _has_bits_[0] &= ~0x00000004u;
}
void Computer_CPU_TR3200::clear_wait_cycles() {
  wait_cycles_ = 0u;
  clear_has_wait_cycles();
}
 ::google::protobuf::uint32 Computer_CPU_TR3200::wait_cycles() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.wait_cycles)
  return wait_cycles_;
}
 void Computer_CPU_TR3200::set_wait_cycles(::google::protobuf::uint32 value) {
  set_has_wait_cycles();
  wait_cycles_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.wait_cycles)
}

// required uint32 int_msg = 4;
bool Computer_CPU_TR3200::has_int_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Computer_CPU_TR3200::set_has_int_msg() {
  _has_bits_[0] |= 0x00000008u;
}
void Computer_CPU_TR3200::clear_has_int_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
void Computer_CPU_TR3200::clear_int_msg() {
  int_msg_ = 0u;
  clear_has_int_msg();
}
 ::google::protobuf::uint32 Computer_CPU_TR3200::int_msg() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.int_msg)
  return int_msg_;
}
 void Computer_CPU_TR3200::set_int_msg(::google::protobuf::uint32 value) {
  set_has_int_msg();
  int_msg_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.int_msg)
}

// required bool interrupt = 5;
bool Computer_CPU_TR3200::has_interrupt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Computer_CPU_TR3200::set_has_interrupt() {
  _has_bits_[0] |= 0x00000010u;
}
void Computer_CPU_TR3200::clear_has_interrupt() {
  _has_bits_[0] &= ~0x00000010u;
}
void Computer_CPU_TR3200::clear_interrupt() {
  interrupt_ = false;
  clear_has_interrupt();
}
 bool Computer_CPU_TR3200::interrupt() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.interrupt)
  return interrupt_;
}
 void Computer_CPU_TR3200::set_interrupt(bool value) {
  set_has_interrupt();
  interrupt_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.interrupt)
}

// required bool step_mode = 6;
bool Computer_CPU_TR3200::has_step_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Computer_CPU_TR3200::set_has_step_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void Computer_CPU_TR3200::clear_has_step_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void Computer_CPU_TR3200::clear_step_mode() {
  step_mode_ = false;
  clear_has_step_mode();
}
 bool Computer_CPU_TR3200::step_mode() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.step_mode)
  return step_mode_;
}
 void Computer_CPU_TR3200::set_step_mode(bool value) {
  set_has_step_mode();
  step_mode_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.step_mode)
}

// required bool skiping = 7;
bool Computer_CPU_TR3200::has_skiping() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Computer_CPU_TR3200::set_has_skiping() {
  _has_bits_[0] |= 0x00000040u;
}
void Computer_CPU_TR3200::clear_has_skiping() {
  _has_bits_[0] &= ~0x00000040u;
}
void Computer_CPU_TR3200::clear_skiping() {
  skiping_ = false;
  clear_has_skiping();
}
 bool Computer_CPU_TR3200::skiping() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.skiping)
  return skiping_;
}
 void Computer_CPU_TR3200::set_skiping(bool value) {
  set_has_skiping();
  skiping_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.skiping)
}

// required bool sleeping = 8;
bool Computer_CPU_TR3200::has_sleeping() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Computer_CPU_TR3200::set_has_sleeping() {
  _has_bits_[0] |= 0x00000080u;
}
void Computer_CPU_TR3200::clear_has_sleeping() {
  _has_bits_[0] &= ~0x00000080u;
}
void Computer_CPU_TR3200::clear_sleeping() {
  sleeping_ = false;
  clear_has_sleeping();
}
 bool Computer_CPU_TR3200::sleeping() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.TR3200.sleeping)
  return sleeping_;
}
 void Computer_CPU_TR3200::set_sleeping(bool value) {
  set_has_sleeping();
  sleeping_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Computer.CPU.TR3200.sleeping)
}

// -------------------------------------------------------------------

// Computer_CPU

// optional .tec.proto.Computer.CPU.TR3200 tr3200 = 1;
bool Computer_CPU::has_tr3200() const {
  return cpu_case() == kTr3200;
}
void Computer_CPU::set_has_tr3200() {
  _oneof_case_[0] = kTr3200;
}
void Computer_CPU::clear_tr3200() {
  if (has_tr3200()) {
    delete cpu_.tr3200_;
    clear_has_cpu();
  }
}
 const ::tec::proto::Computer_CPU_TR3200& Computer_CPU::tr3200() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.CPU.tr3200)
  return has_tr3200() ? *cpu_.tr3200_
                      : ::tec::proto::Computer_CPU_TR3200::default_instance();
}
 ::tec::proto::Computer_CPU_TR3200* Computer_CPU::mutable_tr3200() {
  if (!has_tr3200()) {
    clear_cpu();
    set_has_tr3200();
    cpu_.tr3200_ = new ::tec::proto::Computer_CPU_TR3200;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.CPU.tr3200)
  return cpu_.tr3200_;
}
 ::tec::proto::Computer_CPU_TR3200* Computer_CPU::release_tr3200() {
  if (has_tr3200()) {
    clear_has_cpu();
    ::tec::proto::Computer_CPU_TR3200* temp = cpu_.tr3200_;
    cpu_.tr3200_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Computer_CPU::set_allocated_tr3200(::tec::proto::Computer_CPU_TR3200* tr3200) {
  clear_cpu();
  if (tr3200) {
    set_has_tr3200();
    cpu_.tr3200_ = tr3200;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Computer.CPU.tr3200)
}

bool Computer_CPU::has_cpu() const {
  return cpu_case() != CPU_NOT_SET;
}
void Computer_CPU::clear_has_cpu() {
  _oneof_case_[0] = CPU_NOT_SET;
}
Computer_CPU::CpuCase Computer_CPU::cpu_case() const {
  return Computer_CPU::CpuCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Computer

// repeated .tec.proto.Computer.Device devices = 1;
int Computer::devices_size() const {
  return devices_.size();
}
void Computer::clear_devices() {
  devices_.Clear();
}
 const ::tec::proto::Computer_Device& Computer::devices(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.devices)
  return devices_.Get(index);
}
 ::tec::proto::Computer_Device* Computer::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.devices)
  return devices_.Mutable(index);
}
 ::tec::proto::Computer_Device* Computer::add_devices() {
  // @@protoc_insertion_point(field_add:tec.proto.Computer.devices)
  return devices_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::tec::proto::Computer_Device >&
Computer::devices() const {
  // @@protoc_insertion_point(field_list:tec.proto.Computer.devices)
  return devices_;
}
 ::google::protobuf::RepeatedPtrField< ::tec::proto::Computer_Device >*
Computer::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.Computer.devices)
  return &devices_;
}

// required bytes ram = 2;
bool Computer::has_ram() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Computer::set_has_ram() {
  _has_bits_[0] |= 0x00000002u;
}
void Computer::clear_has_ram() {
  _has_bits_[0] &= ~0x00000002u;
}
void Computer::clear_ram() {
  ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ram();
}
 const ::std::string& Computer::ram() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.ram)
  return ram_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Computer::set_ram(const ::std::string& value) {
  set_has_ram();
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Computer.ram)
}
 void Computer::set_ram(const char* value) {
  set_has_ram();
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Computer.ram)
}
 void Computer::set_ram(const void* value, size_t size) {
  set_has_ram();
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Computer.ram)
}
 ::std::string* Computer::mutable_ram() {
  set_has_ram();
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.ram)
  return ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Computer::release_ram() {
  clear_has_ram();
  return ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Computer::set_allocated_ram(::std::string* ram) {
  if (ram != NULL) {
    set_has_ram();
  } else {
    clear_has_ram();
  }
  ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Computer.ram)
}

// required .tec.proto.Computer.CPU cpu = 3;
bool Computer::has_cpu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Computer::set_has_cpu() {
  _has_bits_[0] |= 0x00000004u;
}
void Computer::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000004u;
}
void Computer::clear_cpu() {
  if (cpu_ != NULL) cpu_->::tec::proto::Computer_CPU::Clear();
  clear_has_cpu();
}
 const ::tec::proto::Computer_CPU& Computer::cpu() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.cpu)
  return cpu_ != NULL ? *cpu_ : *default_instance_->cpu_;
}
 ::tec::proto::Computer_CPU* Computer::mutable_cpu() {
  set_has_cpu();
  if (cpu_ == NULL) {
    cpu_ = new ::tec::proto::Computer_CPU;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.cpu)
  return cpu_;
}
 ::tec::proto::Computer_CPU* Computer::release_cpu() {
  clear_has_cpu();
  ::tec::proto::Computer_CPU* temp = cpu_;
  cpu_ = NULL;
  return temp;
}
 void Computer::set_allocated_cpu(::tec::proto::Computer_CPU* cpu) {
  delete cpu_;
  cpu_ = cpu;
  if (cpu) {
    set_has_cpu();
  } else {
    clear_has_cpu();
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Computer.cpu)
}

// optional string rom_file = 4;
bool Computer::has_rom_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Computer::set_has_rom_file() {
  _has_bits_[0] |= 0x00000008u;
}
void Computer::clear_has_rom_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void Computer::clear_rom_file() {
  rom_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rom_file();
}
 const ::std::string& Computer::rom_file() const {
  // @@protoc_insertion_point(field_get:tec.proto.Computer.rom_file)
  return rom_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Computer::set_rom_file(const ::std::string& value) {
  set_has_rom_file();
  rom_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Computer.rom_file)
}
 void Computer::set_rom_file(const char* value) {
  set_has_rom_file();
  rom_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Computer.rom_file)
}
 void Computer::set_rom_file(const char* value, size_t size) {
  set_has_rom_file();
  rom_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Computer.rom_file)
}
 ::std::string* Computer::mutable_rom_file() {
  set_has_rom_file();
  // @@protoc_insertion_point(field_mutable:tec.proto.Computer.rom_file)
  return rom_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Computer::release_rom_file() {
  clear_has_rom_file();
  return rom_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Computer::set_allocated_rom_file(::std::string* rom_file) {
  if (rom_file != NULL) {
    set_has_rom_file();
  } else {
    clear_has_rom_file();
  }
  rom_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rom_file);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Computer.rom_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Component::kRenderableFieldNumber;
const int Component::kPositionFieldNumber;
const int Component::kOrientationFieldNumber;
const int Component::kViewFieldNumber;
const int Component::kAnimationFieldNumber;
const int Component::kScaleFieldNumber;
const int Component::kCollisionBodyFieldNumber;
const int Component::kVelocityFieldNumber;
const int Component::kAudioSourceFieldNumber;
const int Component::kPointLightFieldNumber;
const int Component::kDirectionalLightFieldNumber;
const int Component::kSpotLightFieldNumber;
const int Component::kVoxelVolumeFieldNumber;
const int Component::kComputerFieldNumber;
const int Component::kLuaScriptFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Component)
}

void Component::InitAsDefaultInstance() {
  Component_default_oneof_instance_->renderable_ = const_cast< ::tec::proto::Renderable*>(&::tec::proto::Renderable::default_instance());
  Component_default_oneof_instance_->position_ = const_cast< ::tec::proto::Position*>(&::tec::proto::Position::default_instance());
  Component_default_oneof_instance_->orientation_ = const_cast< ::tec::proto::Orientation*>(&::tec::proto::Orientation::default_instance());
  Component_default_oneof_instance_->view_ = const_cast< ::tec::proto::View*>(&::tec::proto::View::default_instance());
  Component_default_oneof_instance_->animation_ = const_cast< ::tec::proto::Animation*>(&::tec::proto::Animation::default_instance());
  Component_default_oneof_instance_->scale_ = const_cast< ::tec::proto::Scale*>(&::tec::proto::Scale::default_instance());
  Component_default_oneof_instance_->collision_body_ = const_cast< ::tec::proto::CollisionBody*>(&::tec::proto::CollisionBody::default_instance());
  Component_default_oneof_instance_->velocity_ = const_cast< ::tec::proto::Velocity*>(&::tec::proto::Velocity::default_instance());
  Component_default_oneof_instance_->audio_source_ = const_cast< ::tec::proto::AudioSource*>(&::tec::proto::AudioSource::default_instance());
  Component_default_oneof_instance_->pointlight_ = const_cast< ::tec::proto::Light*>(&::tec::proto::Light::default_instance());
  Component_default_oneof_instance_->directionallight_ = const_cast< ::tec::proto::Light*>(&::tec::proto::Light::default_instance());
  Component_default_oneof_instance_->spotlight_ = const_cast< ::tec::proto::Light*>(&::tec::proto::Light::default_instance());
  Component_default_oneof_instance_->voxelvolume_ = const_cast< ::tec::proto::VoxelVolumen*>(&::tec::proto::VoxelVolumen::default_instance());
  Component_default_oneof_instance_->computer_ = const_cast< ::tec::proto::Computer*>(&::tec::proto::Computer::default_instance());
  Component_default_oneof_instance_->luascript_ = const_cast< ::tec::proto::LuaScript*>(&::tec::proto::LuaScript::default_instance());
}

Component::Component(const Component& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Component)
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_component();
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:tec.proto.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (has_component()) {
    clear_component();
  }
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New(::google::protobuf::Arena* arena) const {
  Component* n = new Component;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Component::clear_component() {
  switch(component_case()) {
    case kRenderable: {
      delete component_.renderable_;
      break;
    }
    case kPosition: {
      delete component_.position_;
      break;
    }
    case kOrientation: {
      delete component_.orientation_;
      break;
    }
    case kView: {
      delete component_.view_;
      break;
    }
    case kAnimation: {
      delete component_.animation_;
      break;
    }
    case kScale: {
      delete component_.scale_;
      break;
    }
    case kCollisionBody: {
      delete component_.collision_body_;
      break;
    }
    case kVelocity: {
      delete component_.velocity_;
      break;
    }
    case kAudioSource: {
      delete component_.audio_source_;
      break;
    }
    case kPointLight: {
      delete component_.pointlight_;
      break;
    }
    case kDirectionalLight: {
      delete component_.directionallight_;
      break;
    }
    case kSpotLight: {
      delete component_.spotlight_;
      break;
    }
    case kVoxelVolume: {
      delete component_.voxelvolume_;
      break;
    }
    case kComputer: {
      delete component_.computer_;
      break;
    }
    case kLuaScript: {
      delete component_.luascript_;
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMPONENT_NOT_SET;
}


void Component::Clear() {
  clear_component();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tec.proto.Renderable renderable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .tec.proto.Position position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .tec.proto.Orientation orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_view;
        break;
      }

      // optional .tec.proto.View view = 4;
      case 4: {
        if (tag == 34) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animation;
        break;
      }

      // optional .tec.proto.Animation animation = 5;
      case 5: {
        if (tag == 42) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Scale;
        break;
      }

      // optional .tec.proto.Scale Scale = 6;
      case 6: {
        if (tag == 50) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_collision_body;
        break;
      }

      // optional .tec.proto.CollisionBody collision_body = 7;
      case 7: {
        if (tag == 58) {
         parse_collision_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collision_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_velocity;
        break;
      }

      // optional .tec.proto.Velocity velocity = 8;
      case 8: {
        if (tag == 66) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_audio_source;
        break;
      }

      // optional .tec.proto.AudioSource audio_source = 9;
      case 9: {
        if (tag == 74) {
         parse_audio_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pointLight;
        break;
      }

      // optional .tec.proto.Light pointLight = 10;
      case 10: {
        if (tag == 82) {
         parse_pointLight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointlight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_directionalLight;
        break;
      }

      // optional .tec.proto.Light directionalLight = 11;
      case 11: {
        if (tag == 90) {
         parse_directionalLight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directionallight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_spotLight;
        break;
      }

      // optional .tec.proto.Light spotLight = 12;
      case 12: {
        if (tag == 98) {
         parse_spotLight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spotlight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_voxelVolume;
        break;
      }

      // optional .tec.proto.VoxelVolumen voxelVolume = 13;
      case 13: {
        if (tag == 106) {
         parse_voxelVolume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voxelvolume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_computer;
        break;
      }

      // optional .tec.proto.Computer computer = 14;
      case 14: {
        if (tag == 114) {
         parse_computer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_luaScript;
        break;
      }

      // optional .tec.proto.LuaScript luaScript = 100;
      case 100: {
        if (tag == 802) {
         parse_luaScript:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luascript()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Component)
  // optional .tec.proto.Renderable renderable = 1;
  if (has_renderable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *component_.renderable_, output);
  }

  // optional .tec.proto.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *component_.position_, output);
  }

  // optional .tec.proto.Orientation orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *component_.orientation_, output);
  }

  // optional .tec.proto.View view = 4;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *component_.view_, output);
  }

  // optional .tec.proto.Animation animation = 5;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *component_.animation_, output);
  }

  // optional .tec.proto.Scale Scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *component_.scale_, output);
  }

  // optional .tec.proto.CollisionBody collision_body = 7;
  if (has_collision_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *component_.collision_body_, output);
  }

  // optional .tec.proto.Velocity velocity = 8;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *component_.velocity_, output);
  }

  // optional .tec.proto.AudioSource audio_source = 9;
  if (has_audio_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *component_.audio_source_, output);
  }

  // optional .tec.proto.Light pointLight = 10;
  if (has_pointlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *component_.pointlight_, output);
  }

  // optional .tec.proto.Light directionalLight = 11;
  if (has_directionallight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *component_.directionallight_, output);
  }

  // optional .tec.proto.Light spotLight = 12;
  if (has_spotlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *component_.spotlight_, output);
  }

  // optional .tec.proto.VoxelVolumen voxelVolume = 13;
  if (has_voxelvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *component_.voxelvolume_, output);
  }

  // optional .tec.proto.Computer computer = 14;
  if (has_computer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *component_.computer_, output);
  }

  // optional .tec.proto.LuaScript luaScript = 100;
  if (has_luascript()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *component_.luascript_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Component)
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Component)
  // optional .tec.proto.Renderable renderable = 1;
  if (has_renderable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *component_.renderable_, target);
  }

  // optional .tec.proto.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *component_.position_, target);
  }

  // optional .tec.proto.Orientation orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *component_.orientation_, target);
  }

  // optional .tec.proto.View view = 4;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *component_.view_, target);
  }

  // optional .tec.proto.Animation animation = 5;
  if (has_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *component_.animation_, target);
  }

  // optional .tec.proto.Scale Scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *component_.scale_, target);
  }

  // optional .tec.proto.CollisionBody collision_body = 7;
  if (has_collision_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *component_.collision_body_, target);
  }

  // optional .tec.proto.Velocity velocity = 8;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *component_.velocity_, target);
  }

  // optional .tec.proto.AudioSource audio_source = 9;
  if (has_audio_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *component_.audio_source_, target);
  }

  // optional .tec.proto.Light pointLight = 10;
  if (has_pointlight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *component_.pointlight_, target);
  }

  // optional .tec.proto.Light directionalLight = 11;
  if (has_directionallight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *component_.directionallight_, target);
  }

  // optional .tec.proto.Light spotLight = 12;
  if (has_spotlight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *component_.spotlight_, target);
  }

  // optional .tec.proto.VoxelVolumen voxelVolume = 13;
  if (has_voxelvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *component_.voxelvolume_, target);
  }

  // optional .tec.proto.Computer computer = 14;
  if (has_computer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *component_.computer_, target);
  }

  // optional .tec.proto.LuaScript luaScript = 100;
  if (has_luascript()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, *component_.luascript_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Component)
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  switch (component_case()) {
    // optional .tec.proto.Renderable renderable = 1;
    case kRenderable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.renderable_);
      break;
    }
    // optional .tec.proto.Position position = 2;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.position_);
      break;
    }
    // optional .tec.proto.Orientation orientation = 3;
    case kOrientation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.orientation_);
      break;
    }
    // optional .tec.proto.View view = 4;
    case kView: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.view_);
      break;
    }
    // optional .tec.proto.Animation animation = 5;
    case kAnimation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.animation_);
      break;
    }
    // optional .tec.proto.Scale Scale = 6;
    case kScale: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.scale_);
      break;
    }
    // optional .tec.proto.CollisionBody collision_body = 7;
    case kCollisionBody: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.collision_body_);
      break;
    }
    // optional .tec.proto.Velocity velocity = 8;
    case kVelocity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.velocity_);
      break;
    }
    // optional .tec.proto.AudioSource audio_source = 9;
    case kAudioSource: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.audio_source_);
      break;
    }
    // optional .tec.proto.Light pointLight = 10;
    case kPointLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.pointlight_);
      break;
    }
    // optional .tec.proto.Light directionalLight = 11;
    case kDirectionalLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.directionallight_);
      break;
    }
    // optional .tec.proto.Light spotLight = 12;
    case kSpotLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.spotlight_);
      break;
    }
    // optional .tec.proto.VoxelVolumen voxelVolume = 13;
    case kVoxelVolume: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.voxelvolume_);
      break;
    }
    // optional .tec.proto.Computer computer = 14;
    case kComputer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.computer_);
      break;
    }
    // optional .tec.proto.LuaScript luaScript = 100;
    case kLuaScript: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.luascript_);
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Component* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Component>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.component_case()) {
    case kRenderable: {
      mutable_renderable()->::tec::proto::Renderable::MergeFrom(from.renderable());
      break;
    }
    case kPosition: {
      mutable_position()->::tec::proto::Position::MergeFrom(from.position());
      break;
    }
    case kOrientation: {
      mutable_orientation()->::tec::proto::Orientation::MergeFrom(from.orientation());
      break;
    }
    case kView: {
      mutable_view()->::tec::proto::View::MergeFrom(from.view());
      break;
    }
    case kAnimation: {
      mutable_animation()->::tec::proto::Animation::MergeFrom(from.animation());
      break;
    }
    case kScale: {
      mutable_scale()->::tec::proto::Scale::MergeFrom(from.scale());
      break;
    }
    case kCollisionBody: {
      mutable_collision_body()->::tec::proto::CollisionBody::MergeFrom(from.collision_body());
      break;
    }
    case kVelocity: {
      mutable_velocity()->::tec::proto::Velocity::MergeFrom(from.velocity());
      break;
    }
    case kAudioSource: {
      mutable_audio_source()->::tec::proto::AudioSource::MergeFrom(from.audio_source());
      break;
    }
    case kPointLight: {
      mutable_pointlight()->::tec::proto::Light::MergeFrom(from.pointlight());
      break;
    }
    case kDirectionalLight: {
      mutable_directionallight()->::tec::proto::Light::MergeFrom(from.directionallight());
      break;
    }
    case kSpotLight: {
      mutable_spotlight()->::tec::proto::Light::MergeFrom(from.spotlight());
      break;
    }
    case kVoxelVolume: {
      mutable_voxelvolume()->::tec::proto::VoxelVolumen::MergeFrom(from.voxelvolume());
      break;
    }
    case kComputer: {
      mutable_computer()->::tec::proto::Computer::MergeFrom(from.computer());
      break;
    }
    case kLuaScript: {
      mutable_luascript()->::tec::proto::LuaScript::MergeFrom(from.luascript());
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  if (has_collision_body()) {
    if (!this->collision_body().IsInitialized()) return false;
  }
  if (has_computer()) {
    if (!this->computer().IsInitialized()) return false;
  }
  return true;
}

void Component::Swap(Component* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Component::InternalSwap(Component* other) {
  std::swap(component_, other->component_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Component

// optional .tec.proto.Renderable renderable = 1;
bool Component::has_renderable() const {
  return component_case() == kRenderable;
}
void Component::set_has_renderable() {
  _oneof_case_[0] = kRenderable;
}
void Component::clear_renderable() {
  if (has_renderable()) {
    delete component_.renderable_;
    clear_has_component();
  }
}
 const ::tec::proto::Renderable& Component::renderable() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.renderable)
  return has_renderable() ? *component_.renderable_
                      : ::tec::proto::Renderable::default_instance();
}
 ::tec::proto::Renderable* Component::mutable_renderable() {
  if (!has_renderable()) {
    clear_component();
    set_has_renderable();
    component_.renderable_ = new ::tec::proto::Renderable;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.renderable)
  return component_.renderable_;
}
 ::tec::proto::Renderable* Component::release_renderable() {
  if (has_renderable()) {
    clear_has_component();
    ::tec::proto::Renderable* temp = component_.renderable_;
    component_.renderable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_renderable(::tec::proto::Renderable* renderable) {
  clear_component();
  if (renderable) {
    set_has_renderable();
    component_.renderable_ = renderable;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.renderable)
}

// optional .tec.proto.Position position = 2;
bool Component::has_position() const {
  return component_case() == kPosition;
}
void Component::set_has_position() {
  _oneof_case_[0] = kPosition;
}
void Component::clear_position() {
  if (has_position()) {
    delete component_.position_;
    clear_has_component();
  }
}
 const ::tec::proto::Position& Component::position() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.position)
  return has_position() ? *component_.position_
                      : ::tec::proto::Position::default_instance();
}
 ::tec::proto::Position* Component::mutable_position() {
  if (!has_position()) {
    clear_component();
    set_has_position();
    component_.position_ = new ::tec::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.position)
  return component_.position_;
}
 ::tec::proto::Position* Component::release_position() {
  if (has_position()) {
    clear_has_component();
    ::tec::proto::Position* temp = component_.position_;
    component_.position_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_position(::tec::proto::Position* position) {
  clear_component();
  if (position) {
    set_has_position();
    component_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.position)
}

// optional .tec.proto.Orientation orientation = 3;
bool Component::has_orientation() const {
  return component_case() == kOrientation;
}
void Component::set_has_orientation() {
  _oneof_case_[0] = kOrientation;
}
void Component::clear_orientation() {
  if (has_orientation()) {
    delete component_.orientation_;
    clear_has_component();
  }
}
 const ::tec::proto::Orientation& Component::orientation() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.orientation)
  return has_orientation() ? *component_.orientation_
                      : ::tec::proto::Orientation::default_instance();
}
 ::tec::proto::Orientation* Component::mutable_orientation() {
  if (!has_orientation()) {
    clear_component();
    set_has_orientation();
    component_.orientation_ = new ::tec::proto::Orientation;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.orientation)
  return component_.orientation_;
}
 ::tec::proto::Orientation* Component::release_orientation() {
  if (has_orientation()) {
    clear_has_component();
    ::tec::proto::Orientation* temp = component_.orientation_;
    component_.orientation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_orientation(::tec::proto::Orientation* orientation) {
  clear_component();
  if (orientation) {
    set_has_orientation();
    component_.orientation_ = orientation;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.orientation)
}

// optional .tec.proto.View view = 4;
bool Component::has_view() const {
  return component_case() == kView;
}
void Component::set_has_view() {
  _oneof_case_[0] = kView;
}
void Component::clear_view() {
  if (has_view()) {
    delete component_.view_;
    clear_has_component();
  }
}
 const ::tec::proto::View& Component::view() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.view)
  return has_view() ? *component_.view_
                      : ::tec::proto::View::default_instance();
}
 ::tec::proto::View* Component::mutable_view() {
  if (!has_view()) {
    clear_component();
    set_has_view();
    component_.view_ = new ::tec::proto::View;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.view)
  return component_.view_;
}
 ::tec::proto::View* Component::release_view() {
  if (has_view()) {
    clear_has_component();
    ::tec::proto::View* temp = component_.view_;
    component_.view_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_view(::tec::proto::View* view) {
  clear_component();
  if (view) {
    set_has_view();
    component_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.view)
}

// optional .tec.proto.Animation animation = 5;
bool Component::has_animation() const {
  return component_case() == kAnimation;
}
void Component::set_has_animation() {
  _oneof_case_[0] = kAnimation;
}
void Component::clear_animation() {
  if (has_animation()) {
    delete component_.animation_;
    clear_has_component();
  }
}
 const ::tec::proto::Animation& Component::animation() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.animation)
  return has_animation() ? *component_.animation_
                      : ::tec::proto::Animation::default_instance();
}
 ::tec::proto::Animation* Component::mutable_animation() {
  if (!has_animation()) {
    clear_component();
    set_has_animation();
    component_.animation_ = new ::tec::proto::Animation;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.animation)
  return component_.animation_;
}
 ::tec::proto::Animation* Component::release_animation() {
  if (has_animation()) {
    clear_has_component();
    ::tec::proto::Animation* temp = component_.animation_;
    component_.animation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_animation(::tec::proto::Animation* animation) {
  clear_component();
  if (animation) {
    set_has_animation();
    component_.animation_ = animation;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.animation)
}

// optional .tec.proto.Scale Scale = 6;
bool Component::has_scale() const {
  return component_case() == kScale;
}
void Component::set_has_scale() {
  _oneof_case_[0] = kScale;
}
void Component::clear_scale() {
  if (has_scale()) {
    delete component_.scale_;
    clear_has_component();
  }
}
 const ::tec::proto::Scale& Component::scale() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.Scale)
  return has_scale() ? *component_.scale_
                      : ::tec::proto::Scale::default_instance();
}
 ::tec::proto::Scale* Component::mutable_scale() {
  if (!has_scale()) {
    clear_component();
    set_has_scale();
    component_.scale_ = new ::tec::proto::Scale;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.Scale)
  return component_.scale_;
}
 ::tec::proto::Scale* Component::release_scale() {
  if (has_scale()) {
    clear_has_component();
    ::tec::proto::Scale* temp = component_.scale_;
    component_.scale_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_scale(::tec::proto::Scale* scale) {
  clear_component();
  if (scale) {
    set_has_scale();
    component_.scale_ = scale;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.Scale)
}

// optional .tec.proto.CollisionBody collision_body = 7;
bool Component::has_collision_body() const {
  return component_case() == kCollisionBody;
}
void Component::set_has_collision_body() {
  _oneof_case_[0] = kCollisionBody;
}
void Component::clear_collision_body() {
  if (has_collision_body()) {
    delete component_.collision_body_;
    clear_has_component();
  }
}
 const ::tec::proto::CollisionBody& Component::collision_body() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.collision_body)
  return has_collision_body() ? *component_.collision_body_
                      : ::tec::proto::CollisionBody::default_instance();
}
 ::tec::proto::CollisionBody* Component::mutable_collision_body() {
  if (!has_collision_body()) {
    clear_component();
    set_has_collision_body();
    component_.collision_body_ = new ::tec::proto::CollisionBody;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.collision_body)
  return component_.collision_body_;
}
 ::tec::proto::CollisionBody* Component::release_collision_body() {
  if (has_collision_body()) {
    clear_has_component();
    ::tec::proto::CollisionBody* temp = component_.collision_body_;
    component_.collision_body_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_collision_body(::tec::proto::CollisionBody* collision_body) {
  clear_component();
  if (collision_body) {
    set_has_collision_body();
    component_.collision_body_ = collision_body;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.collision_body)
}

// optional .tec.proto.Velocity velocity = 8;
bool Component::has_velocity() const {
  return component_case() == kVelocity;
}
void Component::set_has_velocity() {
  _oneof_case_[0] = kVelocity;
}
void Component::clear_velocity() {
  if (has_velocity()) {
    delete component_.velocity_;
    clear_has_component();
  }
}
 const ::tec::proto::Velocity& Component::velocity() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.velocity)
  return has_velocity() ? *component_.velocity_
                      : ::tec::proto::Velocity::default_instance();
}
 ::tec::proto::Velocity* Component::mutable_velocity() {
  if (!has_velocity()) {
    clear_component();
    set_has_velocity();
    component_.velocity_ = new ::tec::proto::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.velocity)
  return component_.velocity_;
}
 ::tec::proto::Velocity* Component::release_velocity() {
  if (has_velocity()) {
    clear_has_component();
    ::tec::proto::Velocity* temp = component_.velocity_;
    component_.velocity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_velocity(::tec::proto::Velocity* velocity) {
  clear_component();
  if (velocity) {
    set_has_velocity();
    component_.velocity_ = velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.velocity)
}

// optional .tec.proto.AudioSource audio_source = 9;
bool Component::has_audio_source() const {
  return component_case() == kAudioSource;
}
void Component::set_has_audio_source() {
  _oneof_case_[0] = kAudioSource;
}
void Component::clear_audio_source() {
  if (has_audio_source()) {
    delete component_.audio_source_;
    clear_has_component();
  }
}
 const ::tec::proto::AudioSource& Component::audio_source() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.audio_source)
  return has_audio_source() ? *component_.audio_source_
                      : ::tec::proto::AudioSource::default_instance();
}
 ::tec::proto::AudioSource* Component::mutable_audio_source() {
  if (!has_audio_source()) {
    clear_component();
    set_has_audio_source();
    component_.audio_source_ = new ::tec::proto::AudioSource;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.audio_source)
  return component_.audio_source_;
}
 ::tec::proto::AudioSource* Component::release_audio_source() {
  if (has_audio_source()) {
    clear_has_component();
    ::tec::proto::AudioSource* temp = component_.audio_source_;
    component_.audio_source_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_audio_source(::tec::proto::AudioSource* audio_source) {
  clear_component();
  if (audio_source) {
    set_has_audio_source();
    component_.audio_source_ = audio_source;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.audio_source)
}

// optional .tec.proto.Light pointLight = 10;
bool Component::has_pointlight() const {
  return component_case() == kPointLight;
}
void Component::set_has_pointlight() {
  _oneof_case_[0] = kPointLight;
}
void Component::clear_pointlight() {
  if (has_pointlight()) {
    delete component_.pointlight_;
    clear_has_component();
  }
}
 const ::tec::proto::Light& Component::pointlight() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.pointLight)
  return has_pointlight() ? *component_.pointlight_
                      : ::tec::proto::Light::default_instance();
}
 ::tec::proto::Light* Component::mutable_pointlight() {
  if (!has_pointlight()) {
    clear_component();
    set_has_pointlight();
    component_.pointlight_ = new ::tec::proto::Light;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.pointLight)
  return component_.pointlight_;
}
 ::tec::proto::Light* Component::release_pointlight() {
  if (has_pointlight()) {
    clear_has_component();
    ::tec::proto::Light* temp = component_.pointlight_;
    component_.pointlight_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_pointlight(::tec::proto::Light* pointlight) {
  clear_component();
  if (pointlight) {
    set_has_pointlight();
    component_.pointlight_ = pointlight;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.pointLight)
}

// optional .tec.proto.Light directionalLight = 11;
bool Component::has_directionallight() const {
  return component_case() == kDirectionalLight;
}
void Component::set_has_directionallight() {
  _oneof_case_[0] = kDirectionalLight;
}
void Component::clear_directionallight() {
  if (has_directionallight()) {
    delete component_.directionallight_;
    clear_has_component();
  }
}
 const ::tec::proto::Light& Component::directionallight() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.directionalLight)
  return has_directionallight() ? *component_.directionallight_
                      : ::tec::proto::Light::default_instance();
}
 ::tec::proto::Light* Component::mutable_directionallight() {
  if (!has_directionallight()) {
    clear_component();
    set_has_directionallight();
    component_.directionallight_ = new ::tec::proto::Light;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.directionalLight)
  return component_.directionallight_;
}
 ::tec::proto::Light* Component::release_directionallight() {
  if (has_directionallight()) {
    clear_has_component();
    ::tec::proto::Light* temp = component_.directionallight_;
    component_.directionallight_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_directionallight(::tec::proto::Light* directionallight) {
  clear_component();
  if (directionallight) {
    set_has_directionallight();
    component_.directionallight_ = directionallight;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.directionalLight)
}

// optional .tec.proto.Light spotLight = 12;
bool Component::has_spotlight() const {
  return component_case() == kSpotLight;
}
void Component::set_has_spotlight() {
  _oneof_case_[0] = kSpotLight;
}
void Component::clear_spotlight() {
  if (has_spotlight()) {
    delete component_.spotlight_;
    clear_has_component();
  }
}
 const ::tec::proto::Light& Component::spotlight() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.spotLight)
  return has_spotlight() ? *component_.spotlight_
                      : ::tec::proto::Light::default_instance();
}
 ::tec::proto::Light* Component::mutable_spotlight() {
  if (!has_spotlight()) {
    clear_component();
    set_has_spotlight();
    component_.spotlight_ = new ::tec::proto::Light;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.spotLight)
  return component_.spotlight_;
}
 ::tec::proto::Light* Component::release_spotlight() {
  if (has_spotlight()) {
    clear_has_component();
    ::tec::proto::Light* temp = component_.spotlight_;
    component_.spotlight_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_spotlight(::tec::proto::Light* spotlight) {
  clear_component();
  if (spotlight) {
    set_has_spotlight();
    component_.spotlight_ = spotlight;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.spotLight)
}

// optional .tec.proto.VoxelVolumen voxelVolume = 13;
bool Component::has_voxelvolume() const {
  return component_case() == kVoxelVolume;
}
void Component::set_has_voxelvolume() {
  _oneof_case_[0] = kVoxelVolume;
}
void Component::clear_voxelvolume() {
  if (has_voxelvolume()) {
    delete component_.voxelvolume_;
    clear_has_component();
  }
}
 const ::tec::proto::VoxelVolumen& Component::voxelvolume() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.voxelVolume)
  return has_voxelvolume() ? *component_.voxelvolume_
                      : ::tec::proto::VoxelVolumen::default_instance();
}
 ::tec::proto::VoxelVolumen* Component::mutable_voxelvolume() {
  if (!has_voxelvolume()) {
    clear_component();
    set_has_voxelvolume();
    component_.voxelvolume_ = new ::tec::proto::VoxelVolumen;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.voxelVolume)
  return component_.voxelvolume_;
}
 ::tec::proto::VoxelVolumen* Component::release_voxelvolume() {
  if (has_voxelvolume()) {
    clear_has_component();
    ::tec::proto::VoxelVolumen* temp = component_.voxelvolume_;
    component_.voxelvolume_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_voxelvolume(::tec::proto::VoxelVolumen* voxelvolume) {
  clear_component();
  if (voxelvolume) {
    set_has_voxelvolume();
    component_.voxelvolume_ = voxelvolume;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.voxelVolume)
}

// optional .tec.proto.Computer computer = 14;
bool Component::has_computer() const {
  return component_case() == kComputer;
}
void Component::set_has_computer() {
  _oneof_case_[0] = kComputer;
}
void Component::clear_computer() {
  if (has_computer()) {
    delete component_.computer_;
    clear_has_component();
  }
}
 const ::tec::proto::Computer& Component::computer() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.computer)
  return has_computer() ? *component_.computer_
                      : ::tec::proto::Computer::default_instance();
}
 ::tec::proto::Computer* Component::mutable_computer() {
  if (!has_computer()) {
    clear_component();
    set_has_computer();
    component_.computer_ = new ::tec::proto::Computer;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.computer)
  return component_.computer_;
}
 ::tec::proto::Computer* Component::release_computer() {
  if (has_computer()) {
    clear_has_component();
    ::tec::proto::Computer* temp = component_.computer_;
    component_.computer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_computer(::tec::proto::Computer* computer) {
  clear_component();
  if (computer) {
    set_has_computer();
    component_.computer_ = computer;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.computer)
}

// optional .tec.proto.LuaScript luaScript = 100;
bool Component::has_luascript() const {
  return component_case() == kLuaScript;
}
void Component::set_has_luascript() {
  _oneof_case_[0] = kLuaScript;
}
void Component::clear_luascript() {
  if (has_luascript()) {
    delete component_.luascript_;
    clear_has_component();
  }
}
 const ::tec::proto::LuaScript& Component::luascript() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.luaScript)
  return has_luascript() ? *component_.luascript_
                      : ::tec::proto::LuaScript::default_instance();
}
 ::tec::proto::LuaScript* Component::mutable_luascript() {
  if (!has_luascript()) {
    clear_component();
    set_has_luascript();
    component_.luascript_ = new ::tec::proto::LuaScript;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.luaScript)
  return component_.luascript_;
}
 ::tec::proto::LuaScript* Component::release_luascript() {
  if (has_luascript()) {
    clear_has_component();
    ::tec::proto::LuaScript* temp = component_.luascript_;
    component_.luascript_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_luascript(::tec::proto::LuaScript* luascript) {
  clear_component();
  if (luascript) {
    set_has_luascript();
    component_.luascript_ = luascript;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.luaScript)
}

bool Component::has_component() const {
  return component_case() != COMPONENT_NOT_SET;
}
void Component::clear_has_component() {
  _oneof_case_[0] = COMPONENT_NOT_SET;
}
Component::ComponentCase Component::component_case() const {
  return Component::ComponentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Entity::kIdFieldNumber;
const int Entity::kComponentsFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Entity)
}

void Entity::InitAsDefaultInstance() {
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Entity)
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:tec.proto.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_components;
        break;
      }

      // repeated .tec.proto.Component components = 2;
      case 2: {
        if (tag == 18) {
         parse_components:
          DO_(input->IncrementRecursionDepth());
         parse_loop_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_components;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Entity)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .tec.proto.Component components = 2;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->components(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Entity)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .tec.proto.Component components = 2;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->components(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Entity)
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  // repeated .tec.proto.Component components = 2;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->components())) return false;
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(id_, other->id_);
  components_.UnsafeArenaSwap(&other->components_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// required uint64 id = 1;
bool Entity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Entity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entity::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Entity::id() const {
  // @@protoc_insertion_point(field_get:tec.proto.Entity.id)
  return id_;
}
 void Entity::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Entity.id)
}

// repeated .tec.proto.Component components = 2;
int Entity::components_size() const {
  return components_.size();
}
void Entity::clear_components() {
  components_.Clear();
}
 const ::tec::proto::Component& Entity::components(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.Entity.components)
  return components_.Get(index);
}
 ::tec::proto::Component* Entity::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.Entity.components)
  return components_.Mutable(index);
}
 ::tec::proto::Component* Entity::add_components() {
  // @@protoc_insertion_point(field_add:tec.proto.Entity.components)
  return components_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::tec::proto::Component >&
Entity::components() const {
  // @@protoc_insertion_point(field_list:tec.proto.Entity.components)
  return components_;
}
 ::google::protobuf::RepeatedPtrField< ::tec::proto::Component >*
Entity::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.Entity.components)
  return &components_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EntityFileList::kEntityFileListFieldNumber;
#endif  // !_MSC_VER

EntityFileList::EntityFileList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.EntityFileList)
}

void EntityFileList::InitAsDefaultInstance() {
}

EntityFileList::EntityFileList(const EntityFileList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.EntityFileList)
}

void EntityFileList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityFileList::~EntityFileList() {
  // @@protoc_insertion_point(destructor:tec.proto.EntityFileList)
  SharedDtor();
}

void EntityFileList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityFileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityFileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityFileList_descriptor_;
}

const EntityFileList& EntityFileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

EntityFileList* EntityFileList::default_instance_ = NULL;

EntityFileList* EntityFileList::New(::google::protobuf::Arena* arena) const {
  EntityFileList* n = new EntityFileList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityFileList::Clear() {
  entity_file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityFileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.EntityFileList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string entity_file_list = 1;
      case 1: {
        if (tag == 10) {
         parse_entity_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entity_file_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_file_list(this->entity_file_list_size() - 1).data(),
            this->entity_file_list(this->entity_file_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.EntityFileList.entity_file_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entity_file_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.EntityFileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.EntityFileList)
  return false;
#undef DO_
}

void EntityFileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.EntityFileList)
  // repeated string entity_file_list = 1;
  for (int i = 0; i < this->entity_file_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->entity_file_list(i).data(), this->entity_file_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tec.proto.EntityFileList.entity_file_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entity_file_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.EntityFileList)
}

::google::protobuf::uint8* EntityFileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.EntityFileList)
  // repeated string entity_file_list = 1;
  for (int i = 0; i < this->entity_file_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_file_list(i).data(), this->entity_file_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.EntityFileList.entity_file_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->entity_file_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.EntityFileList)
  return target;
}

int EntityFileList::ByteSize() const {
  int total_size = 0;

  // repeated string entity_file_list = 1;
  total_size += 1 * this->entity_file_list_size();
  for (int i = 0; i < this->entity_file_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entity_file_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityFileList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntityFileList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityFileList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityFileList::MergeFrom(const EntityFileList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entity_file_list_.MergeFrom(from.entity_file_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityFileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityFileList::CopyFrom(const EntityFileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityFileList::IsInitialized() const {

  return true;
}

void EntityFileList::Swap(EntityFileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityFileList::InternalSwap(EntityFileList* other) {
  entity_file_list_.UnsafeArenaSwap(&other->entity_file_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityFileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityFileList_descriptor_;
  metadata.reflection = EntityFileList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityFileList

// repeated string entity_file_list = 1;
int EntityFileList::entity_file_list_size() const {
  return entity_file_list_.size();
}
void EntityFileList::clear_entity_file_list() {
  entity_file_list_.Clear();
}
 const ::std::string& EntityFileList::entity_file_list(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.EntityFileList.entity_file_list)
  return entity_file_list_.Get(index);
}
 ::std::string* EntityFileList::mutable_entity_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.EntityFileList.entity_file_list)
  return entity_file_list_.Mutable(index);
}
 void EntityFileList::set_entity_file_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tec.proto.EntityFileList.entity_file_list)
  entity_file_list_.Mutable(index)->assign(value);
}
 void EntityFileList::set_entity_file_list(int index, const char* value) {
  entity_file_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tec.proto.EntityFileList.entity_file_list)
}
 void EntityFileList::set_entity_file_list(int index, const char* value, size_t size) {
  entity_file_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tec.proto.EntityFileList.entity_file_list)
}
 ::std::string* EntityFileList::add_entity_file_list() {
  return entity_file_list_.Add();
}
 void EntityFileList::add_entity_file_list(const ::std::string& value) {
  entity_file_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tec.proto.EntityFileList.entity_file_list)
}
 void EntityFileList::add_entity_file_list(const char* value) {
  entity_file_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tec.proto.EntityFileList.entity_file_list)
}
 void EntityFileList::add_entity_file_list(const char* value, size_t size) {
  entity_file_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tec.proto.EntityFileList.entity_file_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntityFileList::entity_file_list() const {
  // @@protoc_insertion_point(field_list:tec.proto.EntityFileList.entity_file_list)
  return entity_file_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
EntityFileList::mutable_entity_file_list() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.EntityFileList.entity_file_list)
  return &entity_file_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tec

// @@protoc_insertion_point(global_scope)
